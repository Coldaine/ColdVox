---
name: CI

on:
  push:
    branches:
      - main
      - 'release/*'
      - 'feature/*'
      - 'feat/*'
      - 'fix/*'
  pull_request:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

permissions:
  contents: read
  actions: read
  security-events: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

env:
  RUSTFLAGS: "-D warnings"
  CARGO_TERM_COLOR: always
  VOSK_MODEL_BASENAME: vosk-model-small-en-us-0.15
  MIN_FREE_DISK_GB: 10
  MAX_LOAD_AVERAGE: 5

jobs:
  validate-workflows:
    name: Validate Workflow Definitions
    runs-on: [self-hosted, Linux, X64, fedora, nobara]
    continue-on-error: true # Optional validation
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Validate with gh
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v gh >/dev/null 2>&1;
            then
            echo "gh CLI not found on runner, skipping workflow validation"
            exit 0
          fi

          shopt -s nullglob
          files=(.github/workflows/*.yml .github/workflows/*.yaml)
          if [[ ${#files[@]} -eq 0 ]]
            then
            echo "No workflow files found"
            exit 0
          fi

          echo "Validating ${{ github.sha }} against ${#files[@]} workflow files..."
          failed=0
          for wf in "${files[@]}"
            do
            echo "-- $wf"
            if ! gh workflow view "$wf" --ref "$GITHUB_SHA" --yaml >/dev/null 2>&1
              then
              echo "ERROR: Failed to render $wf via gh" >&2
              failed=1
            fi
          done

          if [[ $failed -ne 0 ]]
            then
            echo "One or more workflows failed server-side validation via gh." >&2
            exit 1
          fi
          echo "All workflows render via gh."

  setup-vosk-dependencies:
    name: Setup Vosk Dependencies
    runs-on: [self-hosted, Linux, X64, fedora, nobara]
    outputs:
      model_path: ${{ steps.setup.outputs.model_path }}
      lib_path: ${{ steps.setup.outputs.lib_path }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Setup Vosk Model and Library
        id: setup
        run: bash scripts/ci/setup-vosk-cache.sh

  # Build, check, and test with multiple Rust versions
  build_and_check:
    name: Build & Test
    runs-on: [self-hosted, Linux, X64, fedora, nobara]
    needs: [setup-vosk-dependencies]
    strategy:
      matrix:
        rust-version: [stable, '1.75'] # MSRV is 1.75
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust-version }}
          components: rustfmt, clippy
          override: true

      - name: Setup ColdVox
        uses: ./.github/actions/setup-coldvox
        with:
          skip-toolchain: 'true'

      # Only run formatting and linting on stable
      - name: Check formatting
        if: matrix.rust-version == 'stable'
        run: cargo fmt --all -- --check

      - name: Run clippy
        if: matrix.rust-version == 'stable'
        run: cargo clippy --all-targets --locked

      - name: Type check
        run: cargo check --workspace --all-targets --locked

      - name: Build
        run: cargo build --workspace --locked

      # Only build docs and run tests on stable
      - name: Build documentation
        if: matrix.rust-version == 'stable'
        run: cargo doc --workspace --no-deps --locked

      - name: Run unit and integration tests (skip E2E)
        if: matrix.rust-version == 'stable'
        env:
          VOSK_MODEL_PATH: ${{ needs.setup-vosk-dependencies.outputs.model_path }}
          LD_LIBRARY_PATH: ${{ needs.setup-vosk-dependencies.outputs.lib_path }}
        run: |
          echo "=== Environment Validation ==="
          echo "VOSK_MODEL_PATH: $VOSK_MODEL_PATH"
          echo "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"
          echo "Model directory contents:"
          ls -la "$VOSK_MODEL_PATH" || echo "Model directory not accessible"
          echo "Lib directory contents:"
          ls -la "$LD_LIBRARY_PATH" || echo "Lib directory not accessible"
          echo "=== Running Tests ==="
          cargo test --workspace --locked --

      # GUI groundwork check integrated here
      - name: Detect and test Qt 6 GUI
        if: matrix.rust-version == 'stable'
        run: |
          if bash scripts/ci/detect-qt6.sh
            then
            echo "✅ Qt 6 detected - building GUI"
            cargo check -p coldvox-gui --features qt-ui --locked
          else
            echo "⚠️ Qt 6 not detected - skipping GUI build"
          fi

      - name: Upload test artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts-build-${{ matrix.rust-version }}
          path: |
            target/debug/deps/
            target/debug/build/
          retention-days: 7


  text_injection_tests:
    name: Text Injection Tests
    runs-on: [self-hosted, Linux, X64, fedora, nobara]
    needs: [setup-vosk-dependencies]
    timeout-minutes: 30
    env:
      DISPLAY: :99
      RUST_LOG: debug
      RUST_TEST_TIME_UNIT: 10000
      RUST_TEST_TIME_INTEGRATION: 30000
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - uses: dtolnay/rust-toolchain@e97e2d8cc328f1b50210efc529dca0028893a2d9 # v1
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0

      - name: Setup ColdVox
        uses: ./.github/actions/setup-coldvox


      - name: Start and verify headless environment
        run: |
          set -euo pipefail
          # Use our custom headless environment script
          DISPLAY=:99 ${{ github.workspace }}/scripts/start-headless.sh
          
          # Setup D-Bus session
          eval "$(dbus-launch --sh-syntax)"
          echo "DBUS_SESSION_BUS_ADDRESS=$DBUS_SESSION_BUS_ADDRESS" >> $GITHUB_ENV
          echo "DBUS_SESSION_BUS_PID=$DBUS_SESSION_BUS_PID" >> $GITHUB_ENV
          # Verify D-Bus and clipboard tools
          if ! pgrep -x "dbus-daemon" >/dev/null; then echo "D-Bus daemon not running" >&2; exit 1; fi
          echo "D-Bus is running."
          echo "DBUS_SESSION_BUS_ADDRESS: $DBUS_SESSION_BUS_ADDRESS"
          echo "DBUS_SESSION_BUS_PID: $DBUS_SESSION_BUS_PID"
          if ! command -v xclip >/dev/null; then echo "xclip not found"; exit 1; fi
          if ! command -v wl-paste >/dev/null; then echo "wl-clipboard not found"; exit 1; fi
          echo "Clipboard utilities are available."

      - name: Validate test prerequisites
        run: |
          echo "=== Test Environment Validation ==="
          echo "Display: $DISPLAY"
          echo "Available text injection backends:"
          command -v xdotool >/dev/null && echo "  - xdotool: $(xdotool --version 2>/dev/null || echo 'available')"
          command -v ydotool >/dev/null && echo "  - ydotool: available"
          command -v enigo >/dev/null && echo "  - enigo: available (Rust crate)"
          echo "GTK development libraries:"
          pkg-config --exists gtk+-3.0 && echo "  - GTK+ 3.0: available" || echo "  - GTK+ 3.0: not found"
          echo "System audio:"
          command -v alsa-info >/dev/null && echo "  - ALSA: available" || echo "  - ALSA: not found"
          echo "=== Validation Complete ==="

      - name: Test with real-injection-tests feature
        run: |
          dbus-run-session -- bash -lc '
            # Set per-test timeout to prevent hanging
            export RUST_TEST_TIME_UNIT="10000"  # 10 second timeout per test
            export RUST_TEST_TIME_INTEGRATION="30000"  # 30 second for integration tests
            cargo test -p coldvox-text-injection \
              --features real-injection-tests \
              -- --nocapture --test-threads=1 --timeout 600
          '

      - name: Build pipeline (default features)
        run: |
          dbus-run-session -- bash -c '
            set -euo pipefail
            echo "Testing default features..."
            cargo test -p coldvox-text-injection --locked

            echo "Testing without default features..."
            cargo test -p coldvox-text-injection --no-default-features --locked

            echo "Testing regex feature only..."
            cargo test -p coldvox-text-injection --no-default-features --features regex --locked
          '

      # Build main app to ensure integration compiles
      - name: Build main application
        run: cargo build --locked -p coldvox-app

      - name: Run E2E pipeline test
        env:
          VOSK_MODEL_PATH: ${{ needs.setup-vosk-dependencies.outputs.model_path }}
          LD_LIBRARY_PATH: ${{ needs.setup-vosk-dependencies.outputs.lib_path }}
        run: |
          echo "=== E2E Environment Validation ==="
          echo "VOSK_MODEL_PATH: $VOSK_MODEL_PATH"
          echo "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"
          echo "=== Running E2E Test ==="
          cargo test -p coldvox-app --locked test_end_to_end_wav_pipeline -- --nocapture

      - name: Upload test artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts-text-injection
          path: |
            target/debug/deps/
            target/debug/build/
            models/
          retention-days: 7

      - name: Cleanup background processes
        if: always()
        run: |
          set -euo pipefail
          echo "Cleaning up background processes..."
          # Kill Xvfb
          pkill -f "Xvfb.*:99" || true
          # Kill fluxbox
          pkill -f "fluxbox.*:99" || true
          # Kill dbus-daemon if it was started by this session
          if [[ -n "${DBUS_SESSION_BUS_PID:-}" ]]
            then
            kill "$DBUS_SESSION_BUS_PID" 2>/dev/null || true
          fi
          echo "Cleanup completed."

  ci_success:
    name: CI Success Summary
    runs-on: [self-hosted, Linux, X64, fedora, nobara]
    needs:
      - validate-workflows
      - setup-vosk-dependencies
      - build_and_check
      - text_injection_tests
    if: always()
    steps:
      - uses: actions/checkout@v4
      - name: Generate CI Report
        run: |
          echo "## CI Report" > report.md
          echo "- validate-workflows:            ${{ needs.validate-workflows.result }}" >> report.md
          echo "- setup-vosk-dependencies:       ${{ needs.setup-vosk-dependencies.result }}" >> report.md
          echo "- build_and_check:               ${{ needs.build_and_check.result }}" >> report.md
          echo "- text_injection_tests:          ${{ needs.text_injection_tests.result }}" >> report.md
          if [[ "${{ needs.setup-vosk-dependencies.result }}" != "success" ]]; then echo "::error::Setup Vosk dependencies failed."; exit 1; fi
          if [[ "${{ needs.build_and_check.result }}" != "success" ]]; then echo "::error::Build and check failed."; exit 1; fi
          if [[ "${{ needs.text_injection_tests.result }}" != "success" ]]; then echo "::error::Text injection tests failed."; exit 1; fi
          echo "All critical stages passed successfully."
      - name: Upload CI Report
        uses: actions/upload-artifact@v4
        with:
          name: ci-report
          path: report.md
