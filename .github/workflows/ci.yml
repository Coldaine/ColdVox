---
name: CI

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read
  checks: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  RUST_TEST_TIME_UNIT: 10000
  RUST_TEST_TIME_INTEGRATION: 30000

jobs:
  validate-workflows:
    name: Validate Workflow Definitions
    runs-on: ubuntu-latest
    continue-on-error: true # Optional validation
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Validate with gh
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v gh >/dev/null 2>&1; then
            echo "gh CLI not found on runner, skipping workflow validation"
            exit 0
          fi

          shopt -s nullglob
          files=(.github/workflows/*.yml .github/workflows/*.yaml)
          if [[ ${#files[@]} -eq 0 ]]; then
            echo "No workflow files found"
            exit 0
          fi

          echo "Validating ${{ github.sha }} against ${#files[@]} workflow files..."
          failed=0
          for wf in "${files[@]}"; do
            echo "-- $wf"
            if ! gh workflow view "$wf" --ref "$GITHUB_SHA" --yaml >/dev/null 2>&1; then
              echo "ERROR: Failed to render $wf via gh" >&2
              failed=1
            fi
          done

          if [[ $failed -ne 0 ]]; then
            echo "One or more workflows failed server-side validation via gh." >&2
            exit 1
          fi
          echo "All workflows render via gh."

  download-vosk-model:
    name: Use Vendored Vosk Model
    runs-on: ubuntu-latest
    outputs:
      model-path: ${{ steps.get-model-path.outputs.path }}
      download-outcome: success
    steps:
      - name: Verify vendored model exists
        run: |
          set -euo pipefail
          MODEL_PATH="${{ github.workspace }}/models/vosk-model-small-en-us-0.15"
          if [ ! -d "$MODEL_PATH" ]; then
            echo "FATAL: Vendored Vosk model not found at $MODEL_PATH" >&2
            echo "Ensure 'models/vosk-model-small-en-us-0.15/' is committed to repository." >&2
            exit 1
          fi
          echo "Vosk model verified at: $MODEL_PATH"

          # Verify required subdirectories exist (fail fast if missing)
          echo "Verifying model structure..."
          for dir in am conf graph ivector; do
            if [ ! -d "$MODEL_PATH/$dir" ]; then
              echo "ERROR: Required model subdirectory '$dir' missing" >&2
              exit 1
            fi
          done

          # Verify critical model files
          echo "Verifying critical model files..."
          test -f "$MODEL_PATH/am/final.mdl" || {
            echo "ERROR: Critical model file 'am/final.mdl' missing" >&2
            exit 1
          }
          test -f "$MODEL_PATH/conf/mfcc.conf" || {
            echo "ERROR: Critical model file 'conf/mfcc.conf' missing" >&2
            exit 1
          }
          test -f "$MODEL_PATH/ivector/final.ie" || {
            echo "ERROR: Critical model file 'ivector/final.ie' missing" >&2
            exit 1
          }

          # Check model size (ensure it's not empty/corrupt)
          model_size=$(du -sm "$MODEL_PATH" | cut -f1)
          if [ "$model_size" -lt 40 ]; then
            echo "ERROR: Model appears incomplete - size is only ${model_size}MB (expected 40MB+)" >&2
            exit 1
          fi

          echo "Model structure and integrity verified (${model_size}MB)."

      - name: Output model path
        id: get-model-path
        run: |
          echo "path=${{ github.workspace }}/models/vosk-model-small-en-us-0.15" >> $GITHUB_OUTPUT

  # Static checks, formatting, linting, type-check, build, and docs
  build_and_check:
    name: Format, Lint, Typecheck, Build & Docs
    runs-on: ubuntu-latest
    needs: [download-vosk-model]
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup ColdVox
        uses: ./.github/actions/setup-coldvox

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --locked

      - name: Type check
        run: cargo check --workspace --all-targets --locked

      - name: Build
        run: cargo build --workspace --locked

      - name: Build documentation
        run: cargo doc --workspace --no-deps --locked

      - name: Run unit and integration tests (skip E2E)
        if: needs.download-vosk-model.outputs.download-outcome == 'success'
        env:
          VOSK_MODEL_PATH: ${{ needs.download-vosk-model.outputs.model-path }}
        run: |
          echo "=== Environment Validation ==="
          echo "VOSK_MODEL_PATH: $VOSK_MODEL_PATH"
          echo "Model directory contents:"
          ls -la "$VOSK_MODEL_PATH" || echo "Model directory not accessible"
          echo "=== Running Tests ==="
          cargo test --workspace --locked --

      - name: Upload test artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts-build-check
          path: |
            target/debug/deps/
            target/debug/build/
          retention-days: 7

  # MSRV validation
  msrv-check:
    name: MSRV Check (Rust 1.75)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - uses: dtolnay/rust-toolchain@e97e2d8cc328f1b50210efc529dca0028893a2d9 # v1
        with:
          toolchain: 1.75

      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0

      - name: Setup ColdVox
        uses: ./.github/actions/setup-coldvox
        with:
          skip-toolchain: 'true'

      - name: MSRV type check
        run: cargo check --workspace --all-targets --locked

      - name: MSRV build
        run: cargo build --workspace --locked

  # GUI groundwork check: explicitly pass if Qt 6 isn't installed
  gui-groundwork:
    name: GUI Groundwork (Qt optional)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - uses: dtolnay/rust-toolchain@e97e2d8cc328f1b50210efc529dca0028893a2d9 # v1
        with:
          toolchain: stable

      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0

      - name: Detect Qt 6
        id: detect-qt
        shell: bash
        run: |
          set -euo pipefail
          qt_found=false
          if command -v qmake6 >/dev/null 2>&1; then
            qt_found=true
          elif command -v qmake-qt6 >/dev/null 2>&1; then
            qt_found=true
          elif pkg-config --exists Qt6Core >/dev/null 2>&1; then
            qt_found=true
          fi
          echo "qt6=$qt_found" >> "$GITHUB_OUTPUT"
          if [[ "$qt_found" == "true" ]]; then
            echo "Qt 6 detected on runner."
          else
            echo "Qt 6 not detected; will skip qt-ui build and explicitly pass."
          fi

      - name: Build coldvox-gui with qt-ui feature
        if: steps.detect-qt.outputs.qt6 == 'true'
        run: |
          cargo check -p coldvox-gui --features qt-ui --locked

      - name: Qt not found â€” skip build
        if: steps.detect-qt.outputs.qt6 != 'true'
        run: |
          echo "WARNING: Qt 6 not detected. Skipping qt-ui build." >&2
          echo "Install Qt 6 to enable GUI testing."

  text_injection_tests:
    name: Text Injection Tests
    runs-on: ubuntu-latest
    needs: [download-vosk-model]
    timeout-minutes: 30
    env:
      DISPLAY: :99
      RUST_LOG: debug
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: dtolnay/rust-toolchain@e97e2d8cc328f1b50210efc529dca0028893a2d9 # v1
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0

      - name: Setup ColdVox
        uses: ./.github/actions/setup-coldvox

      # Install dependencies for text injection backends (AT-SPI, clipboard, ydotool)
      - name: Install additional system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            xvfb \
            fluxbox \
            dbus-x11 \
            at-spi2-core \
            wl-clipboard \
            xclip \
            ydotool \
            x11-utils \
            wmctrl \
            libgtk-3-dev

      - name: Start and verify headless environment
        run: |
          set -euo pipefail
          # Start Xvfb
          Xvfb :99 -screen 0 1024x768x24 &
          for i in {1..30}; do
            if xdpyinfo -display ":99" >/dev/null 2>&1; then echo "Xvfb ready"; break; fi
            sleep 0.5; [[ $i -eq 30 ]] && exit 1
          done
          # Start window manager
          fluxbox -display :99 &
          for i in {1..30}; do
            if wmctrl -m >/dev/null 2>&1; then echo "Window manager ready"; break; fi
            sleep 0.5; [[ $i -eq 30 ]] && exit 1
          done
          # Setup D-Bus session
          eval "$(dbus-launch --sh-syntax)"
          echo "DBUS_SESSION_BUS_ADDRESS=$DBUS_SESSION_BUS_ADDRESS" >> $GITHUB_ENV
          echo "DBUS_SESSION_BUS_PID=$DBUS_SESSION_BUS_PID" >> $GITHUB_ENV
          # Verify D-Bus and clipboard tools
          if ! pgrep -x "dbus-daemon" >/dev/null; then echo "D-Bus daemon not running" >&2; exit 1; fi
          echo "D-Bus is running."
          echo "DBUS_SESSION_BUS_ADDRESS: $DBUS_SESSION_BUS_ADDRESS"
          echo "DBUS_SESSION_BUS_PID: $DBUS_SESSION_BUS_PID"
          if ! command -v xclip >/dev/null; then echo "xclip not found"; exit 1; fi
          if ! command -v wl-paste >/dev/null; then echo "wl-clipboard not found"; exit 1; fi
          echo "Clipboard utilities are available."

      - name: Validate test prerequisites
        run: |
          echo "=== Test Environment Validation ==="
          echo "Display: $DISPLAY"
          echo "Available text injection backends:"
          command -v xdotool >/dev/null && echo "  - xdotool: $(xdotool --version 2>/dev/null || echo 'available')"
          command -v ydotool >/dev/null && echo "  - ydotool: available"
          command -v enigo >/dev/null && echo "  - enigo: available (Rust crate)"
          echo "GTK development libraries:"
          pkg-config --exists gtk+-3.0 && echo "  - GTK+ 3.0: available" || echo "  - GTK+ 3.0: not found"
          echo "System audio:"
          command -v alsa-info >/dev/null && echo "  - ALSA: available" || echo "  - ALSA: not found"
          echo "=== Validation Complete ==="

      - name: Test with real-injection-tests feature
        run: |
          dbus-run-session -- bash -lc '
            # Set per-test timeout to prevent hanging
            export RUST_TEST_TIME_UNIT="10000"  # 10 second timeout per test
            export RUST_TEST_TIME_INTEGRATION="30000"  # 30 second for integration tests
            cargo test -p coldvox-text-injection \
              --features real-injection-tests \
              -- --nocapture --test-threads=1 --timeout 600
          '

      - name: Build pipeline (default features)
        run: |
          dbus-run-session -- bash -c '
            set -euo pipefail
            echo "Testing default features..."
            cargo test -p coldvox-text-injection --locked

            echo "Testing without default features..."
            cargo test -p coldvox-text-injection --no-default-features --locked

            echo "Testing regex feature only..."
            cargo test -p coldvox-text-injection --no-default-features --features regex --locked
          '

      # Build main app to ensure integration compiles
      - name: Build main application
        run: cargo build --locked -p coldvox-app

      - name: Run E2E pipeline test
        if: needs.download-vosk-model.outputs.download-outcome == 'success'
        env:
          VOSK_MODEL_PATH: ${{ needs.download-vosk-model.outputs.model-path }}
        run: |
          cargo test -p coldvox-app --locked test_end_to_end_wav_pipeline -- --nocapture

      - name: Upload test artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts-text-injection
          path: |
            target/debug/deps/
            target/debug/build/
            models/
          retention-days: 7

      - name: Cleanup background processes
        if: always()
        run: |
          set -euo pipefail
          echo "Cleaning up background processes..."
          # Kill Xvfb
          pkill -f "Xvfb.*:99" || true
          # Kill fluxbox
          pkill -f "fluxbox.*:99" || true
          # Kill dbus-daemon if it was started by this session
          if [[ -n "${DBUS_SESSION_BUS_PID:-}" ]]; then
            kill "$DBUS_SESSION_BUS_PID" 2>/dev/null || true
          fi
          echo "Cleanup completed."

  # Security audit
  security:
    name: Security Audit
    if: github.ref == 'refs/heads/main' # Only run on main
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - uses: rustsec/audit-check@v2.0.0 # pin to release tag
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Run security audit
        run: cargo audit

  # Success marker job
  ci-success:
    name: CI Success
    if: always()
    needs: [validate-workflows, download-vosk-model, build_and_check, msrv-check, gui-groundwork, text_injection_tests]
    runs-on: ubuntu-latest
    steps:
      - name: Check if all jobs succeeded
        run: |
          set -euo pipefail
          failed=0
          for res in \
            "${{ needs.validate-workflows.result }}" \
            "${{ needs.download-vosk-model.result }}" \
            "${{ needs.build_and_check.result }}" \
            "${{ needs.msrv-check.result }}" \
            "${{ needs.gui-groundwork.result }}" \
            "${{ needs.text_injection_tests.result }}"; do
            if [[ "$res" == "failure" ]]; then
              failed=1
            fi
          done
          if [[ $failed -eq 1 ]]; then
            echo "One or more CI jobs failed"
            exit 1
          fi
          echo "All CI jobs succeeded (ignoring skipped)"
