name: CI

on:
  push:
    branches:
      name: CI

      on:
        push:
          branches:
            - main
            - 'release/*'
            - 'feature/*'
            - 'feat/*'
            - 'fix/*'
        pull_request:
          branches:
            - main
        workflow_dispatch:
        schedule:
          - cron: '0 0 * * *'

      permissions:
        contents: read
        actions: read
        security-events: write

      concurrency:
        group: ci-${{ github.ref }}
        cancel-in-progress: true

      defaults:
        run:
          shell: bash

      env:
        RUSTFLAGS: "-D warnings"
        CARGO_TERM_COLOR: always
        VOSK_MODEL_BASENAME: vosk-model-small-en-us-0.15
        VOSK_CACHE_ROOT: /home/coldaine/ActionRunnerCache/vosk-model
        LIBVOSK_PATH: /usr/local/lib/libvosk.so
        MIN_FREE_DISK_GB: 10
        MAX_LOAD_AVERAGE: 5

      jobs:
        validate_workflows:
          name: Validate Workflows
          runs-on: [self-hosted, linux, x64]
          steps:
            - uses: actions/checkout@v4
            - name: Run actionlint
              uses: reviewdog/action-actionlint@v1
              with:
                github_token: ${{ secrets.GITHUB_TOKEN }}
            - name: Sanity list workflows (non-blocking)
              run: gh workflow list || echo "gh CLI unavailable"

        gate_runner_health:
          name: Runner Health Gate
          runs-on: [self-hosted, linux, x64]
          needs: validate_workflows
          steps:
            - uses: actions/checkout@v4
            - name: Verify runner health
              run: bash scripts/runner_health_check.sh
            - name: Check resource thresholds
              run: |
                set -euo pipefail
                FREE_DISK=$(df -BG / | awk 'NR==2 {print substr($4,1,length($4)-1)}')
                if [ "$FREE_DISK" -lt "${{ env.MIN_FREE_DISK_GB }}" ]; then
                  echo "Insufficient free disk space: $FREE_DISK GB < ${{ env.MIN_FREE_DISK_GB }} GB" >&2
                  exit 1
                fi
                LOAD=$(uptime | awk -F 'load average:' '{print $2}' | awk '{print $1}' | tr -d ',')
                if awk "BEGIN {exit !($LOAD > ${{ env.MAX_LOAD_AVERAGE }})}"; then
                  echo "Load average too high: $LOAD > ${{ env.MAX_LOAD_AVERAGE }}" >&2
                  exit 1
                fi
            - name: Verify libvosk presence
              run: bash scripts/verify_libvosk.sh
            - name: Clean workspace (optional)
              run: cargo clean || true

        setup_vosk_model:
          name: Prepare Vosk Model Symlink
          runs-on: [self-hosted, linux, x64]
          needs: gate_runner_health
          outputs:
            model_path: ${{ steps.set_model_path.outputs.model_path }}
          steps:
            - uses: actions/checkout@v4
            - name: Resolve model path
              id: set_model_path
              run: |
                set -euo pipefail
                SRC="${{ env.VOSK_CACHE_ROOT }}/${{ env.VOSK_MODEL_BASENAME }}"
                if [[ ! -d "$SRC" ]]; then
                  echo "Cached Vosk model not found: $SRC" >&2
                  exit 1
                fi
                mkdir -p models
                DEST="models/${{ env.VOSK_MODEL_BASENAME }}"
                if [[ -L "$DEST" || -d "$DEST" ]]; then
                  rm -rf "$DEST"
                fi
                ln -s "$SRC" "$DEST"
                echo "model_path=$DEST" >> "$GITHUB_OUTPUT"
            - name: Basic model structure check
              run: bash scripts/verify_vosk_model.sh "${{ steps.set_model_path.outputs.model_path }}"
            - name: Integrity verification
              run: |
                if [[ -f scripts/verify-model-integrity.sh ]]; then
                  if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then MODE="enforce"; else MODE="warn"; fi
                  bash scripts/verify-model-integrity.sh "${{ steps.set_model_path.outputs.model_path }}" models/SHA256SUMS $MODE
                else
                  echo "Skipping integrity check (script not present)."
                fi

        build_and_check:
          name: Build & Static Analysis
          runs-on: [self-hosted, linux, x64]
          needs: setup_vosk_model
          env:
            VOSK_MODEL_PATH: ${{ needs.setup_vosk_model.outputs.model_path }}
          steps:
            - uses: actions/checkout@v4
            - name: Install Rust Toolchain
              uses: dtolnay/rust-toolchain@stable
              with:
                components: clippy, rustfmt
            - name: Cache Cargo
              uses: Swatinem/rust-cache@v2
              with:
                cache-on-failure: true
            - name: Format check
              run: cargo fmt --all -- --check
            - name: Lint with Clippy
              run: cargo clippy --all --all-targets --no-deps -- -D warnings
            - name: Build Project (debug)
              run: cargo build --workspace --all-features
            - name: Build Documentation
              run: cargo doc --no-deps --all-features
            - name: Minimal feature matrix build
              run: cargo build -p coldvox-app --no-default-features --features silero
            - name: App compile (vosk feature)
              run: cargo build -p coldvox-app --features vosk
            - name: Upload logs on failure
              if: failure()
              uses: actions/upload-artifact@v4
              with:
                name: logs-build-and-check
                path: |
                  **/coldvox.log
                if-no-files-found: ignore
                retention-days: 5

        test_unit_integration:
          name: Unit & Integration Tests
          needs: [build_and_check, setup_vosk_model]
          runs-on: [self-hosted, linux, x64]
          env:
            VOSK_MODEL_PATH: ${{ needs.setup_vosk_model.outputs.model_path }}
          steps:
            - uses: actions/checkout@v4
            - name: Install Rust Toolchain
              uses: dtolnay/rust-toolchain@stable
            - name: Cache Cargo
              uses: Swatinem/rust-cache@v2
            - name: Run Unit Tests
              run: cargo test --workspace --all-features --no-fail-fast --lib
            - name: Run Integration Tests
              run: cargo test --workspace --all-features --no-fail-fast --test integration
            - name: Run End-to-End WAV Pipeline
              run: cargo test --features vosk --test end_to_end_wav -- --ignored
            - name: Upload logs on failure
              if: failure()
              uses: actions/upload-artifact@v4
              with:
                name: logs-unit-integration
                path: |
                  **/coldvox.log
                if-no-files-found: ignore
                retention-days: 5

        test_text_injection:
          name: Text Injection Tests (Headless)
          needs: [build_and_check, setup_vosk_model]
          runs-on: [self-hosted, linux, x64]
          timeout-minutes: 30
          env:
            DISPLAY: :99
            VOSK_MODEL_PATH: ${{ needs.setup_vosk_model.outputs.model_path }}
          steps:
            - uses: actions/checkout@v4
            - name: Install Rust Toolchain
              uses: dtolnay/rust-toolchain@stable
            - name: Cache Cargo
              uses: Swatinem/rust-cache@v2
            - name: Start Headless Environment
              run: |
                Xvfb :99 -screen 0 1024x768x16 &
                openbox-session &
                eval $(dbus-launch --sh-syntax)
                echo "DBUS_SESSION_BUS_ADDRESS=$DBUS_SESSION_BUS_ADDRESS" >> $GITHUB_ENV
            - name: Run Text Injection Tests
              run: cargo test -p coldvox-text-injection --all-features -- --nocapture
            - name: Upload Logs on Failure
              if: failure()
              uses: actions/upload-artifact@v4
              with:
                name: text-injection-logs
                path: '**/*.log'
                retention-days: 7

        check_msrv:
          name: MSRV Check (Rust 1.75)
          needs: build_and_check
          runs-on: [self-hosted, linux, x64]
          steps:
            - uses: actions/checkout@v4
            - name: Install Rust Toolchain 1.75
              uses: dtolnay/rust-toolchain@1.75
            - name: Cache Cargo
              uses: Swatinem/rust-cache@v2
            - name: MSRV Check
              run: cargo check --workspace --all-targets

        gui_groundwork:
          name: GUI Groundwork (Qt Optional)
          needs: build_and_check
          runs-on: [self-hosted, linux, x64]
          continue-on-error: true
          steps:
            - uses: actions/checkout@v4
            - name: Install Rust Toolchain
              uses: dtolnay/rust-toolchain@stable
            - name: Cache Cargo
              uses: Swatinem/rust-cache@v2
            - name: Check Qt UI Feature
              run: cargo check -p coldvox-gui --features qt-ui || echo "Qt not detected, skipping."

        security_audit:
          name: Security & License Audit
          needs: build_and_check
          runs-on: [self-hosted, linux, x64]
          steps:
            - uses: actions/checkout@v4
            - name: Install Security Tools
              run: |
                cargo install cargo-deny --locked
                cargo install cargo-audit --locked
            - name: Run Cargo Deny Checks
              run: cargo deny check bans licenses sources advisories
            - name: Run Cargo Audit
              run: cargo audit

        publish_dry_run:
          name: Publish Dry Run
          needs: [security_audit, test_unit_integration]
          if: github.ref == 'refs/heads/main' && github.event_name == 'push'
          runs-on: [self-hosted, linux, x64]
          steps:
            - uses: actions/checkout@v4
            - name: Install Rust Toolchain
              uses: dtolnay/rust-toolchain@stable
            - name: Dry-Run Publish
              run: |
                set -euo pipefail
                cargo publish --workspace --dry-run || {
                  echo "::warning::Dry-run publish encountered issues (expected for unpublished private crates)."
                }

        ci_success:
          name: CI Success Summary
          runs-on: [self-hosted, linux, x64]
          needs:
            - validate_workflows
            - gate_runner_health
            - setup_vosk_model
            - build_and_check
            - test_unit_integration
            - test_text_injection
            - check_msrv
            - gui_groundwork
            - security_audit
            - publish_dry_run
          if: always()
          steps:
            - uses: actions/checkout@v4
            - name: Generate CI Report
              run: |
                echo "## CI Report" > report.md
                echo "- validate_workflows:            ${{ needs.validate_workflows.result }}" >> report.md
                echo "- gate_runner_health:            ${{ needs.gate_runner_health.result }}" >> report.md
                echo "- setup_vosk_model:              ${{ needs.setup_vosk_model.result }}" >> report.md
                echo "- build_and_check:               ${{ needs.build_and_check.result }}" >> report.md
                echo "- test_unit_integration:         ${{ needs.test_unit_integration.result }}" >> report.md
                echo "- test_text_injection:           ${{ needs.test_text_injection.result }}" >> report.md
                echo "- check_msrv:                    ${{ needs.check_msrv.result }}" >> report.md
                echo "- gui_groundwork:                ${{ needs.gui_groundwork.result }}" >> report.md
                echo "- security_audit:                ${{ needs.security_audit.result }}" >> report.md
                echo "- publish_dry_run:               ${{ needs.publish_dry_run.result }}" >> report.md
                if [[ "${{ needs.gate_runner_health.result }}" != "success" ]]; then echo "::error::Runner health gate failed."; exit 1; fi
                if [[ "${{ needs.build_and_check.result }}" != "success" ]]; then echo "::error::Build and check failed."; exit 1; fi
                if [[ "${{ needs.test_unit_integration.result }}" != "success" ]]; then echo "::error::Unit and integration tests failed."; exit 1; fi
                if [[ "${{ needs.test_text_injection.result }}" != "success" ]]; then echo "::error::Text injection tests failed."; exit 1; fi
                if [[ "${{ needs.security_audit.result }}" != "success" ]]; then echo "::error::Security audit failed."; exit 1; fi
                echo "All critical stages passed successfully."
            - name: Upload CI Report
              uses: actions/upload-artifact@v4
              with:
                name: ci-report
                path: report.md
              uses: actions/upload-artifact@v4
              with:
                name: ci-report
                path: report.md
      name: Prepare Vosk Model Symlink
      runs-on: [self-hosted, linux, x64]
      needs: gate_runner_health
      outputs:
        model_path: ${{ steps.set_model_path.outputs.model_path }}
      steps:
        - uses: actions/checkout@v4
        - name: Resolve model path
          id: set_model_path
          run: |
            set -euo pipefail
            SRC="${{ env.VOSK_CACHE_ROOT }}/${{ env.VOSK_MODEL_BASENAME }}"
            if [[ ! -d "$SRC" ]]; then
              echo "Cached Vosk model not found: $SRC" >&2
              exit 1
            fi
            
            mkdir -p models
            DEST="models/${{ env.VOSK_MODEL_BASENAME }}"
            if [[ -L "$DEST" || -d "$DEST" ]]; then
              rm -rf "$DEST"
            fi
            ln -s "$SRC" "$DEST"
            echo "model_path=$DEST" >> "$GITHUB_OUTPUT"
        - name: Basic model structure check
          run: bash scripts/verify_vosk_model.sh "${{ steps.set_model_path.outputs.model_path }}"
        - name: Integrity verification
          run: |
            if [[ -f scripts/verify-model-integrity.sh ]]; then
              if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then MODE="enforce"; else MODE="warn"; fi
              bash scripts/verify-model-integrity.sh "${{ steps.set_model_path.outputs.model_path }}" models/SHA256SUMS $MODE
            else
              echo "Skipping integrity check (script not present)."
            fi

    build_and_check:
      name: Build & Static Analysis
      runs-on: [self-hosted, linux, x64]
      needs: setup_vosk_model
      env:
        VOSK_MODEL_PATH: ${{ needs.setup_vosk_model.outputs.model_path }}
      steps:
        - uses: actions/checkout@v4
        - name: Install Rust Toolchain
          uses: dtolnay/rust-toolchain@stable
          with:
            components: clippy, rustfmt
        - name: Cache Cargo
          uses: Swatinem/rust-cache@v2
          with:
            cache-on-failure: true
        - name: Format check
          run: cargo fmt --all -- --check
        - name: Lint with Clippy
          run: cargo clippy --all --all-targets --no-deps -- -D warnings
        - name: Build Project (debug)
          run: cargo build --workspace --all-features
        - name: Build Documentation
          run: cargo doc --no-deps --all-features
        - name: Minimal feature matrix build
          run: cargo build -p coldvox-app --no-default-features --features silero
        - name: App compile (vosk feature)
          run: cargo build -p coldvox-app --features vosk
        - name: Upload logs on failure
          if: failure()
          uses: actions/upload-artifact@v4
          with:
            name: logs-build-and-check
            path: |
              **/coldvox.log
            if-no-files-found: ignore
            retention-days: 5

    test_unit_integration:
      name: Unit & Integration Tests
      needs: [build_and_check, setup_vosk_model]
      runs-on: [self-hosted, linux, x64]
      env:
        VOSK_MODEL_PATH: ${{ needs.setup_vosk_model.outputs.model_path }}
      steps:
        - uses: actions/checkout@v4
        - name: Install Rust Toolchain
          uses: dtolnay/rust-toolchain@stable
        - name: Cache Cargo
          uses: Swatinem/rust-cache@v2
        - name: Run Unit Tests
          run: cargo test --workspace --all-features --no-fail-fast --lib
        - name: Run Integration Tests
          run: cargo test --workspace --all-features --no-fail-fast --test integration
        - name: Run End-to-End WAV Pipeline
          run: cargo test --features vosk --test end_to_end_wav -- --ignored
        - name: Upload logs on failure
          if: failure()
          uses: actions/upload-artifact@v4
          with:
            name: logs-unit-integration
            path: |
              **/coldvox.log
            if-no-files-found: ignore
            retention-days: 5

    test_text_injection:
      name: Text Injection Tests (Headless)
      needs: [build_and_check, setup_vosk_model]
      runs-on: [self-hosted, linux, x64]
      timeout-minutes: 30
      env:
        DISPLAY: :99
        VOSK_MODEL_PATH: ${{ needs.setup_vosk_model.outputs.model_path }}
      steps:
        - uses: actions/checkout@v4
        - name: Install Rust Toolchain
          uses: dtolnay/rust-toolchain@stable
        - name: Cache Cargo
          uses: Swatinem/rust-cache@v2
        - name: Start Headless Environment
          run: |
            Xvfb :99 -screen 0 1024x768x16 &
            openbox-session &
            eval $(dbus-launch --sh-syntax)
            echo "DBUS_SESSION_BUS_ADDRESS=$DBUS_SESSION_BUS_ADDRESS" >> $GITHUB_ENV
        - name: Run Text Injection Tests
          run: cargo test -p coldvox-text-injection --all-features -- --nocapture
        - name: Upload Logs on Failure
          if: failure()
          uses: actions/upload-artifact@v4
          with:
            name: text-injection-logs
            path: '**/*.log'
            retention-days: 7

    check_msrv:
      name: MSRV Check (Rust 1.75)
      needs: build_and_check
      runs-on: [self-hosted, linux, x64]
      steps:
        - uses: actions/checkout@v4
        - name: Install Rust Toolchain 1.75
          uses: dtolnay/rust-toolchain@1.75
        - name: Cache Cargo
          uses: Swatinem/rust-cache@v2
        - name: MSRV Check
          run: cargo check --workspace --all-targets

    gui_groundwork:
      name: GUI Groundwork (Qt Optional)
      needs: build_and_check
      runs-on: [self-hosted, linux, x64]
      continue-on-error: true
      steps:
        - uses: actions/checkout@v4
        - name: Install Rust Toolchain
          uses: dtolnay/rust-toolchain@stable
        - name: Cache Cargo
          uses: Swatinem/rust-cache@v2
        - name: Check Qt UI Feature
          run: cargo check -p coldvox-gui --features qt-ui || echo "Qt not detected, skipping."

    security_audit:
      name: Security & License Audit
      needs: build_and_check
      runs-on: [self-hosted, linux, x64]
      steps:
        - uses: actions/checkout@v4
        - name: Install Security Tools
          run: |
            cargo install cargo-deny --locked
            cargo install cargo-audit --locked
        - name: Run Cargo Deny Checks
          run: cargo deny check bans licenses sources advisories
        - name: Run Cargo Audit
          run: cargo audit

    publish_dry_run:
      name: Publish Dry Run
      needs: [security_audit, test_unit_integration]
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      runs-on: [self-hosted, linux, x64]
      steps:
        - uses: actions/checkout@v4
        - name: Install Rust Toolchain
          uses: dtolnay/rust-toolchain@stable
        - name: Dry-Run Publish
          run: |
            set -euo pipefail
            cargo publish --workspace --dry-run || {
              echo "::warning::Dry-run publish encountered issues (expected for unpublished private crates)."
            }

    ci_success:
      name: CI Success Summary
      runs-on: [self-hosted, linux, x64]
      needs:
        - validate_workflows
        - gate_runner_health
        - setup_vosk_model
        - build_and_check
        - test_unit_integration
        - test_text_injection
        - check_msrv
        - gui_groundwork
        - security_audit
        - publish_dry_run
      if: always()
      steps:
        - uses: actions/checkout@v4
        - name: Generate CI Report
          run: |
            echo "## CI Report" > report.md
            echo "- validate_workflows:            ${{ needs.validate_workflows.result }}" >> report.md
            echo "- gate_runner_health:            ${{ needs.gate_runner_health.result }}" >> report.md
            echo "- setup_vosk_model:              ${{ needs.setup_vosk_model.result }}" >> report.md
            echo "- build_and_check:               ${{ needs.build_and_check.result }}" >> report.md
            echo "- test_unit_integration:         ${{ needs.test_unit_integration.result }}" >> report.md
            echo "- test_text_injection:           ${{ needs.test_text_injection.result }}" >> report.md
            echo "- check_msrv:                    ${{ needs.check_msrv.result }}" >> report.md
            echo "- gui_groundwork:                ${{ needs.gui_groundwork.result }}" >> report.md
            echo "- security_audit:                ${{ needs.security_audit.result }}" >> report.md
            echo "- publish_dry_run:               ${{ needs.publish_dry_run.result }}" >> report.md
            if [[ "${{ needs.gate_runner_health.result }}" != "success" ]]; then echo "::error::Runner health gate failed."; exit 1; fi
            if [[ "${{ needs.build_and_check.result }}" != "success" ]]; then echo "::error::Build and check failed."; exit 1; fi
            if [[ "${{ needs.test_unit_integration.result }}" != "success" ]]; then echo "::error::Unit and integration tests failed."; exit 1; fi
            if [[ "${{ needs.test_text_injection.result }}" != "success" ]]; then echo "::error::Text injection tests failed."; exit 1; fi
            if [[ "${{ needs.security_audit.result }}" != "success" ]]; then echo "::error::Security audit failed."; exit 1; fi
            echo "All critical stages passed successfully."
        - name: Upload CI Report
          uses: actions/upload-artifact@v4
          with:
            name: ci-report
            path: report.md
=======
jobs:
  validate_workflows:
    name: Validate Workflows
    # NOTE: Do NOT include mutually exclusive distro labels together. Runner currently labeled 'nobara'.
    runs-on: [self-hosted, Linux, X64, nobara]
    steps:
      - uses: actions/checkout@v4
      - name: actionlint
        uses: rhysd/actionlint@v1

  gate_runner_health:
    name: Runner Health Gate
    runs-on: [self-hosted, Linux, X64, nobara]
    needs: validate_workflows
    steps:
      - uses: actions/checkout@v4
      - name: Verify runner health
        run: bash scripts/runner_health_check.sh
      - name: Check resource thresholds
        run: |
          FREE_DISK=$(df -BG / | awk 'NR==2 {print substr($4, 1, length($4)-1)}')
          if [ "$FREE_DISK" -lt "${{ env.MIN_FREE_DISK_GB }}" ]; then
            echo "Insufficient free disk space: $FREE_DISK GB < ${{ env.MIN_FREE_DISK_GB }} GB" >&2
            exit 1
          fi
          LOAD=$(uptime | awk -F 'load average:' '{print $2}' | awk '{print $1}' | tr -d ',')
          if [ 1 -eq "$(echo "$LOAD > ${{ env.MAX_LOAD_AVERAGE }}" | bc)" ]; then
            echo "Load average too high: $LOAD > ${{ env.MAX_LOAD_AVERAGE }}" >&2
            exit 1
          fi
      - name: Verify libvosk
        run: bash scripts/verify_libvosk.sh
      - name: Clean workspace (optional)
        run: cargo clean || true

  setup_vosk_model:
    name: Prepare Vosk Model Symlink
    runs-on: [self-hosted, Linux, X64, nobara]
    needs: gate_runner_health
    outputs:
      model_path: ${{ steps.set-model-path.outputs.model_path }}
    steps:
      - uses: actions/checkout@v4
      - name: Resolve model path
        id: set-model-path
        run: |
          set -euo pipefail
          SRC="${{ env.VOSK_CACHE_ROOT }}/${{ env.VOSK_MODEL_BASENAME }}"
          if [[ ! -d "$SRC" ]]; then
            echo "Cached Vosk model not found: $SRC" >&2
            exit 1
          fi
          mkdir -p models
          DEST="models/${{ env.VOSK_MODEL_BASENAME }}"
          if [[ -L "$DEST" || -d "$DEST" ]]; then
            rm -rf "$DEST"
          fi
          ln -s "$SRC" "$DEST"
          echo "model_path=$DEST" >> "$GITHUB_OUTPUT"
      - name: Basic model structure check
        run: bash scripts/verify_vosk_model.sh "${{ steps.set-model-path.outputs.model_path }}"
      - name: Integrity verification
        run: |
          if [[ -f scripts/verify-model-integrity.sh ]]; then
            bash scripts/verify-model-integrity.sh "${{ steps.set-model-path.outputs.model_path }}" models/SHA256SUMS ${{ github.ref == 'refs/heads/main' && 'enforce' || 'warn' }}
          else
            echo "Skipping integrity check (script not present)."
          fi

  build_and_check:
    name: Build & Static Analysis
    runs-on: [self-hosted, Linux, X64, nobara]
    needs: setup_vosk_model
    env:
      VOSK_MODEL_PATH: ${{ needs.setup_vosk_model.outputs.model_path }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy,rustfmt
      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - name: Format check
        run: cargo fmt --all -- --check
      - name: Clippy
        run: cargo clippy --all --all-targets --no-deps -- -D warnings
      - name: Build (debug)
        run: cargo build --workspace --all-features
      - name: Build docs
        run: cargo doc --no-deps --all-features
      - name: Minimal feature matrix
        run: cargo build -p coldvox-app --no-default-features --features silero
      - name: App (vosk feature) compile
        run: cargo build -p coldvox-app --features vosk

  test_unit_integration:
    name: Unit & Integration Tests
    needs: build_and_check
    runs-on: [self-hosted, Linux, X64, nobara]
    env:
      VOSK_MODEL_PATH: ${{ needs.setup_vosk_model.outputs.model_path }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Run unit tests
        run: cargo test --workspace --all-features --no-fail-fast --lib
      - name: Run integration tests
        run: cargo test --workspace --all-features --no-fail-fast --test integration
      - name: Run E2E WAV pipeline
        run: cargo test --features vosk --test end_to_end_wav -- --ignored

  test_text_injection:
    name: Text Injection Tests (headless)
    needs: build_and_check
    runs-on: [self-hosted, Linux, X64, nobara]
    timeout-minutes: 30
    env:
      DISPLAY: :99
      VOSK_MODEL_PATH: ${{ needs.setup_vosk_model.outputs.model_path }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Start headless environment
        run: |
          Xvfb :99 -screen 0 1024x768x16 &
          openbox-session &
          eval $(dbus-launch --sh-syntax)
          echo "DBUS_SESSION_BUS_ADDRESS=$DBUS_SESSION_BUS_ADDRESS" >> $GITHUB_ENV
      - name: Run text injection tests
        run: cargo test -p coldvox-text-injection --all-features -- --nocapture
      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: text-injection-logs
          path: '**/*.log'
          retention-days: 7

  check_msrv:
    name: MSRV Check (1.75)
    needs: build_and_check
    runs-on: [self-hosted, Linux, X64, nobara]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@1.75
      - uses: Swatinem/rust-cache@v2
      - name: MSRV check
        run: cargo check --workspace --all-targets

  gui_groundwork:
    name: GUI Groundwork (Qt optional)
    needs: build_and_check
    runs-on: [self-hosted, Linux, X64, nobara]
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Check Qt UI feature
        run: cargo check -p coldvox-gui --features qt-ui || echo "Qt not detected, skipping."

  perf_probe:
    name: Performance Probe
    needs: [test_unit_integration, test_text_injection]
    if: github.event_name == 'schedule' || github.ref == 'refs/heads/main'
    runs-on: [self-hosted, Linux, X64, nobara]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Run perf tests
        run: cargo test --features perf --test perf_probe -- --ignored
      - name: Capture metrics
        run: |
          echo '{"fps": 60, "latency": 100}' > metrics.json
      - name: Upload metrics
        uses: actions/upload-artifact@v4
        with:
          name: perf-metrics
          path: metrics.json
          retention-days: 30

  ci_success:
    name: CI Summary & Diagnostics
    # Always run to capture summary, regardless of previous job outcomes
    if: always()
    runs-on: [self-hosted, Linux, X64, nobara]
    needs:
      - validate_workflows
      - gate_runner_health
      - setup_vosk_model
      - build_and_check
      - test_unit_integration
      - test_text_injection
      - check_msrv
      - gui_groundwork
      # perf_probe is conditional; include for completeness (will be skipped if job skipped)
      - perf_probe
    steps:
      - name: Summarize results
        run: |
          echo "CI aggregate status (doesn't include this job): ${{ needs.build_and_check.result }}, unit=${{ needs.test_unit_integration.result }}, text_injection=${{ needs.test_text_injection.result }}" 
          if [ "${{ needs.build_and_check.result }}" != "success" ] || [ "${{ needs.test_unit_integration.result }}" != "success" ]; then
            echo "One or more critical jobs failed." >&2
          fi
      - name: Collect resource snapshot
        run: bash scripts/analyze-job-resources.sh || true
      - name: Upload logs (best-effort)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ci-logs
          path: |
            logs/**
            target/debug/**/*.log
          retention-days: 7
>>>>>>> be58021 (ci: normalize runner labels (nobara), add ci_success job, fix YAML indentation)
