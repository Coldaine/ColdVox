---
name: CI

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read
  checks: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: false

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  RUST_TEST_TIME_UNIT: 10000
  RUST_TEST_TIME_INTEGRATION: 30000

jobs:
  validate-workflows:
    name: Validate Workflow Definitions
    runs-on: ubuntu-latest
    continue-on-error: true # Optional validation
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Validate with gh
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v gh >/dev/null 2>&1; then
            echo "gh CLI not found on runner, skipping workflow validation"
            exit 0
          fi

          shopt -s nullglob
          files=(.github/workflows/*.yml .github/workflows/*.yaml)
          if [[ ${#files[@]} -eq 0 ]]; then
            echo "No workflow files found"
            exit 0
          fi

          echo "Validating ${{ github.sha }} against ${#files[@]} workflow files..."
          failed=0
          for wf in "${files[@]}"; do
            echo "-- $wf"
            if ! gh workflow view "$wf" --ref "$GITHUB_SHA" --yaml >/dev/null 2>&1; then
              echo "ERROR: Failed to render $wf via gh" >&2
              failed=1
            fi
          done

          if [[ $failed -ne 0 ]]; then
            echo "One or more workflows failed server-side validation via gh." >&2
            exit 1
          fi
          echo "All workflows render via gh."

  setup-vosk-model:
    name: Setup Vosk Model from Cache
    runs-on: ubuntu-latest
    outputs:
      model-path: ${{ steps.get-model-path.outputs.path }}
      download-outcome: success
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        
      - name: Setup Vosk Model from Cache
        run: |
          # Export LD_LIBRARY_PATH for Vosk
          export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
          sudo ldconfig
          
          # Use pre-cached models from permanent cache location (only on self-hosted)
          CACHE_DIR="/home/coldaine/ActionRunnerCache/vosk-models"
          MODEL_DIR="models"
          
          mkdir -p $MODEL_DIR
          
          # Check if we're on self-hosted runner with cache
          if [ -d "$CACHE_DIR/vosk-model-small-en-us-0.15" ]; then
            # Self-hosted runner: use cached models
            rm -rf "$MODEL_DIR/vosk-model-small-en-us-0.15"
            ln -sf "$CACHE_DIR/vosk-model-small-en-us-0.15" "$MODEL_DIR/"
            echo "✅ Linked cached vosk-model-small-en-us-0.15"
            
            if [ -d "$CACHE_DIR/vosk-model-en-us-0.22" ]; then
              rm -rf "$MODEL_DIR/vosk-model-en-us-0.22"
              ln -sf "$CACHE_DIR/vosk-model-en-us-0.22" "$MODEL_DIR/"
              echo "✅ Linked cached vosk-model-en-us-0.22"
            fi
          else
            # GitHub-hosted runner: download model
            echo "📥 Downloading Vosk model (cache not available)..."
            wget -q -O vosk-model-small-en-us-0.15.zip "https://alphacephei.com/vosk/models/vosk-model-small-en-us-0.15.zip"
            unzip -q vosk-model-small-en-us-0.15.zip
            # If target already exists and is non-empty, remove it first (stale partial)
            if [ -d "$MODEL_DIR/vosk-model-small-en-us-0.15" ]; then
              if [ "$(ls -A $MODEL_DIR/vosk-model-small-en-us-0.15 2>/dev/null)" ]; then
                echo "⚠️  Removing existing non-empty stale directory: $MODEL_DIR/vosk-model-small-en-us-0.15"
                rm -rf "$MODEL_DIR/vosk-model-small-en-us-0.15"
              else
                rm -rf "$MODEL_DIR/vosk-model-small-en-us-0.15"
              fi
            fi
            # Move extracted directory into place
            if [ -d "vosk-model-small-en-us-0.15" ]; then
              mv "vosk-model-small-en-us-0.15" "$MODEL_DIR/"
            else
              echo "❌ Extracted model directory not found after unzip" >&2
              exit 1
            fi
            rm vosk-model-small-en-us-0.15.zip
            echo "✅ Downloaded vosk-model-small-en-us-0.15"
          fi
          
          echo ""
          echo "Model directory contents:"
          ls -la $MODEL_DIR/
          echo ""
          echo "✅ Model setup complete"

      - name: Output model path
        id: get-model-path
        run: |
          echo "path=${{ github.workspace }}/models/vosk-model-small-en-us-0.15" >> $GITHUB_OUTPUT

  # Static checks, formatting, linting, type-check, build, and docs
  build_and_check:
    name: Format, Lint, Typecheck, Build & Docs
    runs-on: ubuntu-latest
    needs: [setup-vosk-model]
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          override: true

      - name: Setup ColdVox
        uses: ./.github/actions/setup-coldvox
        with:
          skip-toolchain: 'true'

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --locked

      - name: Type check
        run: cargo check --workspace --all-targets --locked

      - name: Build
        run: cargo build --workspace --locked

      - name: Build documentation
        run: cargo doc --workspace --no-deps --locked

      - name: Run unit and integration tests (skip E2E)
        if: needs.setup-vosk-model.outputs.download-outcome == 'success'
        env:
          VOSK_MODEL_PATH: ${{ needs.setup-vosk-model.outputs.model-path }}
        run: |
          echo "=== Environment Validation ==="
          echo "VOSK_MODEL_PATH: $VOSK_MODEL_PATH"
          echo "Model directory contents:"
          ls -la "$VOSK_MODEL_PATH" || echo "Model directory not accessible"
          echo "=== Running Tests ==="
          cargo test --workspace --locked --

      - name: Upload test artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts-build-check
          path: |
            target/debug/deps/
            target/debug/build/
          retention-days: 7

  # MSRV validation
  msrv-check:
    name: MSRV Check (Rust 1.75)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - uses: dtolnay/rust-toolchain@e97e2d8cc328f1b50210efc529dca0028893a2d9 # v1
        with:
          toolchain: 1.75

      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0

      - name: Setup ColdVox
        uses: ./.github/actions/setup-coldvox
        with:
          skip-toolchain: 'true'

      - name: MSRV type check
        run: cargo check --workspace --all-targets --locked

      - name: MSRV build
        run: cargo build --workspace --locked

  # GUI groundwork check: explicitly pass if Qt 6 isn't installed
  gui-groundwork:
    name: GUI Groundwork (Qt optional)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - uses: dtolnay/rust-toolchain@e97e2d8cc328f1b50210efc529dca0028893a2d9 # v1
        with:
          toolchain: stable

      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0

      - name: Detect Qt 6
        id: detect-qt
        shell: bash
        run: |
          set -euo pipefail
          echo "=== Qt 6 Detection Script ==="
          # Attempt to install lsb_release if not present, for better OS diagnostics
          if ! command -v lsb_release >/dev/null 2>&1; then
            sudo apt-get update && sudo apt-get install -y lsb-release
          fi
          echo "Runner OS: $(lsb_release -a 2>/dev/null || echo 'lsb_release not found')"
          echo "Initial PATH: $PATH"

          qt6_found=false
          qmake_path=""
          detection_method=""

          # 1. Check for QT6_PATH environment variable override
          if [[ -n "${QT6_PATH:-}" ]] && [[ -x "${QT6_PATH}/bin/qmake" ]]; then
              qmake_path="${QT6_PATH}/bin/qmake"
              detection_method="QT6_PATH override ($qmake_path)"
          fi

          # 2. Find qmake executable (qmake6, qmake-qt6, qmake) in PATH
          if [[ -z "$qmake_path" ]]; then
              for qmake_candidate in qmake6 qmake-qt6 qmake; do
                  if command -v "$qmake_candidate" >/dev/null 2>&1; then
                      qmake_path=$(command -v "$qmake_candidate")
                      detection_method="qmake in PATH ($qmake_path)"
                      break
                  fi
              done
          fi

          # 3. If qmake was found, verify it's Qt 6
          if [[ -n "$qmake_path" ]]; then
              echo "Found qmake executable at: $qmake_path"
              qt_version=$($qmake_path -query QT_VERSION)
              echo "qmake -query QT_VERSION returned: $qt_version"
              if [[ "$qt_version" == 6.* ]]; then
                  qt6_found=true
                  echo "✅ Qt 6 detected via qmake version check."
              else
                  echo "⚠️ Found qmake, but it's not for Qt 6 (version $qt_version). Resetting search."
                  qmake_path=""
                  detection_method=""
              fi
          fi

          # 4. Fallback to pkg-config
          if [[ "$qt6_found" == "false" ]] && command -v pkg-config >/dev/null 2>&1; then
              echo "Attempting detection via pkg-config..."
              if pkg-config --exists Qt6Core; then
                  qt6_found=true
                  detection_method="pkg-config"
                  echo "✅ Qt 6 detected via pkg-config."
              else
                  echo "pkg-config did not find Qt6Core."
              fi
          fi

          # 5. Fallback to CMake
          if [[ "$qt6_found" == "false" ]] && command -v cmake >/dev/null 2>&1; then
              echo "Attempting detection via CMake..."
              # Create a minimal CMakeLists.txt to find Qt6
              cat <<EOF > CMakeLists.txt
          cmake_minimum_required(VERSION 3.16)
          project(Qt6Check)
          find_package(Qt6 QUIET REQUIRED)
          EOF
              if cmake -B build -S . >/dev/null 2>&1; then
                  qt6_found=true
                  detection_method="CMake find_package"
                  echo "✅ Qt 6 detected via CMake."
              else
                  echo "CMake find_package(Qt6) failed."
              fi
              rm -rf CMakeLists.txt build
          fi

          echo "============================="
          echo "Final detection result: qt6=$qt6_found"
          if [[ "$qt6_found" == "true" ]]; then
              echo "Qt 6 detected on runner using method: $detection_method."
          else
              echo "Qt 6 not detected; will skip qt-ui build and explicitly pass."
          fi
          echo "qt6=$qt6_found" >> "$GITHUB_OUTPUT"

      - name: Build coldvox-gui with qt-ui feature
        if: steps.detect-qt.outputs.qt6 == 'true'
        run: |
          cargo check -p coldvox-gui --features qt-ui --locked

      - name: Qt not found — skip build
        if: steps.detect-qt.outputs.qt6 != 'true'
        run: |
          echo "WARNING: Qt 6 not detected. Skipping qt-ui build." >&2
          echo "Install Qt 6 to enable GUI testing."

  text_injection_tests:
    name: Text Injection Tests
    runs-on: ubuntu-latest
    needs: [setup-vosk-model]
    timeout-minutes: 30
    env:
      DISPLAY: :99
      RUST_LOG: debug
      RUST_TEST_TIME_UNIT: 10000
      RUST_TEST_TIME_INTEGRATION: 30000
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - uses: dtolnay/rust-toolchain@e97e2d8cc328f1b50210efc529dca0028893a2d9 # v1
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0

      - name: Setup ColdVox
        uses: ./.github/actions/setup-coldvox

      # Install dependencies for text injection backends (AT-SPI, clipboard, ydotool)
      - name: Install additional system dependencies
        run: |
          # Detect package manager and install appropriate packages
          if command -v dnf >/dev/null 2>&1; then
            # Fedora/RHEL/Nobara
            sudo dnf install -y --skip-unavailable \
              xorg-x11-server-Xvfb \
              openbox \
              dbus-x11 \
              at-spi2-core \
              wl-clipboard \
              xclip \
              ydotool \
              xorg-x11-utils \
              wmctrl \
              gtk3-devel \
              pulseaudio
          elif command -v apt-get >/dev/null 2>&1; then
            # Ubuntu/Debian
            sudo apt-get update
            sudo apt-get install -y \
              xvfb \
              openbox \
              dbus-x11 \
              at-spi2-core \
              wl-clipboard \
              xclip \
              ydotool \
              x11-utils \
              wmctrl \
              libgtk-3-dev \
              pulseaudio
          else
            echo "ERROR: Unsupported package manager" >&2
            exit 1
          fi

      - name: Start and verify headless environment
        run: |
          set -euo pipefail
          # Use our custom headless environment script
          DISPLAY=:99 ${{ github.workspace }}/scripts/start-headless.sh
          
          # Setup D-Bus session
          eval "$(dbus-launch --sh-syntax)"
          echo "DBUS_SESSION_BUS_ADDRESS=$DBUS_SESSION_BUS_ADDRESS" >> $GITHUB_ENV
          echo "DBUS_SESSION_BUS_PID=$DBUS_SESSION_BUS_PID" >> $GITHUB_ENV
          # Verify D-Bus and clipboard tools
          if ! pgrep -x "dbus-daemon" >/dev/null; then echo "D-Bus daemon not running" >&2; exit 1; fi
          echo "D-Bus is running."
          echo "DBUS_SESSION_BUS_ADDRESS: $DBUS_SESSION_BUS_ADDRESS"
          echo "DBUS_SESSION_BUS_PID: $DBUS_SESSION_BUS_PID"
          if ! command -v xclip >/dev/null; then echo "xclip not found"; exit 1; fi
          if ! command -v wl-paste >/dev/null; then echo "wl-clipboard not found"; exit 1; fi
          echo "Clipboard utilities are available."

      - name: Validate test prerequisites
        run: |
          echo "=== Test Environment Validation ==="
          echo "Display: $DISPLAY"
          echo "Available text injection backends:"
          command -v xdotool >/dev/null && echo "  - xdotool: $(xdotool --version 2>/dev/null || echo 'available')"
          command -v ydotool >/dev/null && echo "  - ydotool: available"
          command -v enigo >/dev/null && echo "  - enigo: available (Rust crate)"
          echo "GTK development libraries:"
          pkg-config --exists gtk+-3.0 && echo "  - GTK+ 3.0: available" || echo "  - GTK+ 3.0: not found"
          echo "System audio:"
          command -v alsa-info >/dev/null && echo "  - ALSA: available" || echo "  - ALSA: not found"
          echo "=== Validation Complete ==="

      - name: Test with real-injection-tests feature
        run: |
          dbus-run-session -- bash -lc '
            # Set per-test timeout to prevent hanging
            export RUST_TEST_TIME_UNIT="10000"  # 10 second timeout per test
            export RUST_TEST_TIME_INTEGRATION="30000"  # 30 second for integration tests
            cargo test -p coldvox-text-injection \
              --features real-injection-tests \
              -- --nocapture --test-threads=1 --timeout 600
          '

      - name: Build pipeline (default features)
        run: |
          dbus-run-session -- bash -c '
            set -euo pipefail
            echo "Testing default features..."
            cargo test -p coldvox-text-injection --locked

            echo "Testing without default features..."
            cargo test -p coldvox-text-injection --no-default-features --locked

            echo "Testing regex feature only..."
            cargo test -p coldvox-text-injection --no-default-features --features regex --locked
          '

      # Build main app to ensure integration compiles
      - name: Build main application
        run: cargo build --locked -p coldvox-app

      - name: Run E2E pipeline test
        if: needs.setup-vosk-model.outputs.download-outcome == 'success'
        env:
          VOSK_MODEL_PATH: ${{ needs.setup-vosk-model.outputs.model-path }}
        run: |
          cargo test -p coldvox-app --locked test_end_to_end_wav_pipeline -- --nocapture

      - name: Upload test artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts-text-injection
          path: |
            target/debug/deps/
            target/debug/build/
            models/
          retention-days: 7

      - name: Cleanup background processes
        if: always()
        run: |
          set -euo pipefail
          echo "Cleaning up background processes..."
          # Kill Xvfb
          pkill -f "Xvfb.*:99" || true
          # Kill fluxbox
          pkill -f "fluxbox.*:99" || true
          # Kill dbus-daemon if it was started by this session
          if [[ -n "${DBUS_SESSION_BUS_PID:-}" ]]; then
            kill "$DBUS_SESSION_BUS_PID" 2>/dev/null || true
          fi
          echo "Cleanup completed."

  # Security audit
  security:
    name: Security Audit
    if: github.ref == 'refs/heads/main' # Only run on main
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - uses: rustsec/audit-check@v2.0.0 # pin to release tag
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Run security audit
        run: cargo audit

  # Success marker job
  ci-success:
    name: CI Success
    if: always()
    needs: [validate-workflows, setup-vosk-model, build_and_check, msrv-check, gui-groundwork, text_injection_tests]
    runs-on: ubuntu-latest
    steps:
      - name: Check if all jobs succeeded
        run: |
          set -euo pipefail
          failed=0
          for res in \
            "${{ needs.validate-workflows.result }}" \
            "${{ needs.setup-vosk-model.result }}" \
            "${{ needs.build_and_check.result }}" \
            "${{ needs.msrv-check.result }}" \
            "${{ needs.gui-groundwork.result }}" \
            "${{ needs.text_injection_tests.result }}"; do
            if [[ "$res" == "failure" ]]; then
              failed=1
            fi
          done
          if [[ $failed -eq 1 ]]; then
            echo "One or more CI jobs failed"
            exit 1
          fi
          echo "All CI jobs succeeded (ignoring skipped)"
