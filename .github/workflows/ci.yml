name: CI

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read
  checks: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  RUSTFLAGS: "-D warnings"

jobs:
  validate-workflows:
    name: Validate Workflow Definitions
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.1.7
      - name: Validate with gh
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v gh >/dev/null 2>&1; then
            echo "gh CLI not found on runner" >&2
            exit 1
          fi

          shopt -s nullglob
          files=(.github/workflows/*.yml .github/workflows/*.yaml)
          if [[ ${#files[@]} -eq 0 ]]; then
            echo "No workflow files found"
            exit 0
          fi

          echo "Validating ${{ github.sha }} against ${#files[@]} workflow files..."
          failed=0
          for wf in "${files[@]}"; do
            echo "-- $wf"
            if ! gh workflow view "$wf" --ref "$GITHUB_SHA" --yaml >/dev/null 2>&1; then
              echo "ERROR: Failed to render $wf via gh" >&2
              failed=1
            fi
          done

          if [[ $failed -ne 0 ]]; then
            echo "One or more workflows failed server-side validation via gh." >&2
            exit 1
          fi
          echo "All workflows render via gh."

  # Static checks, formatting, linting, type-check, build, and docs
  build_and_check:
    name: Format, Lint, Typecheck, Build & Docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.1.7

      - uses: dtolnay/rust-toolchain@e97e2d8cc328f1b50210efc529dca0028893a2d9 # v1
        with:
          toolchain: stable
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libasound2-dev \
            libxdo-dev \
            libxtst-dev \
            wget \
            unzip

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --no-default-features --features silero -- -D warnings

      - name: Type check
        run: cargo check --workspace --all-targets --no-default-features --features silero

      - name: Build
        run: cargo build --workspace --no-default-features --features silero

      - name: Build documentation
        run: cargo doc --workspace --no-deps --no-default-features --features silero
        env:
          RUSTDOCFLAGS: "-D warnings"

      - name: Run unit and integration tests (skip E2E)
        run: |
          cargo test --workspace -- --skip test_end_to_end_wav_pipeline

      # Prepare and run End-to-End WAV pipeline test on same runner
      - name: Install libvosk (vendored)
        run: |
          VOSK_VER=0.3.45
          unzip -q vendor/vosk/vosk-linux-x86_64-${VOSK_VER}.zip
          sudo cp -v vosk-linux-x86_64-${VOSK_VER}/libvosk.so /usr/local/lib/
          sudo cp -v vosk-linux-x86_64-${VOSK_VER}/vosk_api.h /usr/local/include/
          sudo ldconfig

      - name: Cache Vosk model
        id: cache-vosk-model
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: models/vosk-model-small-en-us-0.15
          key: vosk-model-small-en-us-0.15
          restore-keys: |
            vosk-model-small-en-us-
            vosk-model-

      - name: Download Vosk model
        if: steps.cache-vosk-model.outputs.cache-hit != 'true'
        run: |
          mkdir -p models
          cd models
          wget https://alphacephei.com/vosk/models/vosk-model-small-en-us-0.15.zip || true
          unzip -q vosk-model-small-en-us-0.15.zip || true
          rm -f vosk-model-small-en-us-0.15.zip

      - name: Build pipeline (default features)
        run: |
          # Default features represent the full end-to-end pipeline
          cargo build --locked -p coldvox-app

      - name: Run End to End WAV pipeline test
        env:
          LD_LIBRARY_PATH: /usr/local/lib:${LD_LIBRARY_PATH}
          VOSK_MODEL_PATH: models/vosk-model-small-en-us-0.15
        run: |
          # Run with default features (full pipeline); no explicit feature flags needed
          cargo test -p coldvox-app --locked test_end_to_end_wav_pipeline -- --nocapture

  # Security audit
  security:
    name: Security Audit
    if: false # temporarily disabled per request
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.t7

      - uses: rustsec/audit-check@v2.0.0 # pin to release tag
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Run security audit
        run: cargo audit

  # Success marker job
  ci-success:
    name: CI Success
    if: always()
    needs: [validate-workflows, build_and_check, security]
    runs-on: ubuntu-latest
    steps:
      - name: Check if all jobs succeeded
        run: |
          set -euo pipefail
          failed=0
          for res in \
            "${{ needs.validate-workflows.result }}" \
            "${{ needs.build_and_check.result }}" \
            "${{ needs.security.result }}"; do
            if [[ "$res" == "failure" ]]; then
              failed=1
            fi
          done
          if [[ $failed -eq 1 ]]; then
            echo "One or more CI jobs failed"
            exit 1
          fi
          echo "All CI jobs succeeded (ignoring skipped)"
