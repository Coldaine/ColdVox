name: CI

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read
  checks: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0

jobs:
  validate-workflows:
    name: Validate Workflow Definitions
    runs-on: ubuntu-latest
    continue-on-error: true # Optional validation
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.1.7
      - name: Validate with gh
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v gh >/dev/null 2>&1; then
            echo "gh CLI not found on runner, skipping workflow validation"
            exit 0
          fi

          shopt -s nullglob
          files=(.github/workflows/*.yml .github/workflows/*.yaml)
          if [[ ${#files[@]} -eq 0 ]]; then
            echo "No workflow files found"
            exit 0
          fi

          echo "Validating ${{ github.sha }} against ${#files[@]} workflow files..."
          failed=0
          for wf in "${files[@]}"; do
            echo "-- $wf"
            if ! gh workflow view "$wf" --ref "$GITHUB_SHA" --yaml >/dev/null 2>&1; then
              echo "ERROR: Failed to render $wf via gh" >&2
              failed=1
            fi
          done

          if [[ $failed -ne 0 ]]; then
            echo "One or more workflows failed server-side validation via gh." >&2
            exit 1
          fi
          echo "All workflows render via gh."

  download-vosk-model:
    name: Download Vosk Model
    runs-on: ubuntu-latest
    outputs:
      model-path: ${{ steps.get-model-path.outputs.path }}
      download-outcome: ${{ steps.download_model.outcome }}
    steps:
      - name: Cache Vosk model
        id: cache-vosk-model
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: models/vosk-model-small-en-us-0.15
          key: vosk-model-small-en-us-0.15
      - name: Download Vosk model
        id: download_model
        if: steps.cache-vosk-model.outputs.cache-hit != 'true'
        run: |
          set -euo pipefail
          mkdir -p models
          cd models
          MODEL=vosk-model-small-en-us-0.15
          ZIP="$MODEL.zip"
          echo "Downloading $ZIP ..."
          for i in 1 2 3; do
            if wget -O "$ZIP" "https://alphacephei.com/vosk/models/$ZIP"; then
              break
            fi
            if [ $i -eq 3 ]; then
              echo "Download failed after 3 retries, continuing without model..." >&2
              mkdir -p "$MODEL"
              exit 1 # Exit with failure
            fi
            echo "Download failed, retrying in 3s..." >&2
            sleep 3
          done
          echo "Unzipping $ZIP ..."
          unzip -q -o "$ZIP"
          rm -f "$ZIP"
          if [ ! -d "$MODEL" ]; then
            FOUND_DIR=$(find . -maxdepth 1 -type d -name "vosk-model-*" | head -n1 || true)
            if [ -n "${FOUND_DIR:-}" ] && [ "$FOUND_DIR" != "./$MODEL" ]; then
              mv "$FOUND_DIR" "$MODEL"
            fi
          fi
          test -d "$MODEL"
        continue-on-error: true # Allow pipeline to continue if model download fails
      - name: Get model path
        id: get-model-path
        run: echo "path=${{ github.workspace }}/models/vosk-model-small-en-us-0.15" >> $GITHUB_OUTPUT

  # Static checks, formatting, linting, type-check, build, and docs
  build_and_check:
    name: Format, Lint, Typecheck, Build & Docs
    runs-on: ubuntu-latest
    needs: [download-vosk-model]
    steps:
      - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.1.7

      - uses: dtolnay/rust-toolchain@e97e2d8cc328f1b50210efc529dca0028893a2d9 # v1
        with:
          toolchain: stable
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libasound2-dev \
            libxdo-dev \
            libxtst-dev \
            wget \
            unzip

      # Install libvosk early so any default-feature builds/tests that link it succeed
      - name: Install libvosk (vendored)
        run: |
          VOSK_VER=0.3.45
          unzip -q vendor/vosk/vosk-linux-x86_64-${VOSK_VER}.zip
          sudo cp -v vosk-linux-x86_64-${VOSK_VER}/libvosk.so /usr/local/lib/
          sudo cp -v vosk-linux-x86_64-${VOSK_VER}/vosk_api.h /usr/local/include/
          sudo ldconfig

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --locked

      - name: Type check
        run: cargo check --workspace --all-targets --locked

      - name: Build
        run: cargo build --workspace --locked

      - name: Build documentation
        run: cargo doc --workspace --no-deps --locked

      - name: Run unit and integration tests (skip E2E)
        if: needs.download-vosk-model.outputs.download-outcome == 'success'
        env:
          VOSK_MODEL_PATH: ${{ needs.download-vosk-model.outputs.model-path }}
        run: |
          cargo test --workspace --locked -- --skip test_end_to_end_wav_pipeline

  # GUI groundwork check: explicitly pass if Qt 6 isn't installed
  gui-groundwork:
    name: GUI Groundwork (Qt optional)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.1.7

      - uses: dtolnay/rust-toolchain@e97e2d8cc328f1b50210efc529dca0028893a2d9 # v1
        with:
          toolchain: stable

      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0

      - name: Detect Qt 6
        id: detect-qt
        shell: bash
        run: |
          set -euo pipefail
          qt_found=false
          if command -v qmake6 >/dev/null 2>&1; then
            qt_found=true
          elif command -v qmake-qt6 >/dev/null 2>&1; then
            qt_found=true
          elif pkg-config --exists Qt6Core >/dev/null 2>&1; then
            qt_found=true
          fi
          echo "qt6=$qt_found" >> "$GITHUB_OUTPUT"
          if [[ "$qt_found" == "true" ]]; then
            echo "Qt 6 detected on runner."
          else
            echo "Qt 6 not detected; will skip qt-ui build and explicitly pass."
          fi

      - name: Build coldvox-gui with qt-ui feature
        if: steps.detect-qt.outputs.qt6 == 'true'
        run: |
          cargo check -p coldvox-gui --features qt-ui --locked

      - name: Qt not found â€” explicit pass
        if: steps.detect-qt.outputs.qt6 != 'true'
        run: echo "Skipping Qt UI build; explicit pass as Qt 6 is not installed."

  text_injection_tests:
    name: Text Injection Tests
    runs-on: ubuntu-latest
    needs: [download-vosk-model]
    env:
      DISPLAY: :99
    steps:
      - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.1.7
      - uses: dtolnay/rust-toolchain@e97e2d8cc328f1b50210efc529dca0028893a2d9 # v1
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0

      # Install dependencies for text injection backends (AT-SPI, clipboard, ydotool)
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            xvfb fluxbox \
            dbus-x11 at-spi2-core \
            wl-clipboard xclip ydotool \
            x11-utils wmctrl \
            libasound2-dev libxdo-dev libxtst-dev

      - name: Install libvosk (vendored)
        run: |
          VOSK_VER=0.3.45
          unzip -q vendor/vosk/vosk-linux-x86_64-${VOSK_VER}.zip
          sudo cp -v vosk-linux-x86_64-${VOSK_VER}/libvosk.so /usr/local/lib/
          sudo cp -v vosk-linux-x86_64-${VOSK_VER}/vosk_api.h /usr/local/include/
          sudo ldconfig

      - name: Start and verify headless environment
        run: |
          set -euo pipefail
          # Start Xvfb
          Xvfb :99 -screen 0 1024x768x24 &
          for i in {1..30};
            if xdpyinfo -display ":99" >/dev/null 2>&1; then echo "Xvfb ready"; break; fi
            sleep 0.5; [[ $i -eq 30 ]] && exit 1
          done
          # Start window manager
          fluxbox -display :99 &
          for i in {1..30};
            if wmctrl -m >/dev/null 2>&1; then echo "Window manager ready"; break; fi
            sleep 0.5; [[ $i -eq 30 ]] && exit 1
          done
          # Setup D-Bus session
          eval "$(dbus-launch --sh-syntax)"
          echo "DBUS_SESSION_BUS_ADDRESS=$DBUS_SESSION_BUS_ADDRESS" >> $GITHUB_ENV
          echo "DBUS_SESSION_BUS_PID=$DBUS_SESSION_BUS_PID" >> $GITHUB_ENV
          # Verify D-Bus and clipboard tools
          if ! pgrep -x "dbus-daemon" >/dev/null; then echo "D-Bus daemon not running" >&2; exit 1; fi
          echo "D-Bus is running."
          if ! command -v xclip >/dev/null; then echo "xclip not found"; exit 1; fi
          if ! command -v wl-paste >/dev/null; then echo "wl-clipboard not found"; exit 1; fi
          echo "Clipboard utilities are available."

      # Test text injection crate with different feature combinations
      - name: Test text injection features
        run: |
          dbus-run-session -- bash -c '
            set -euo pipefail
            echo "Testing default features..."
            cargo test -p coldvox-text-injection --locked

            echo "Testing without default features..."
            cargo test -p coldvox-text-injection --no-default-features --locked

            echo "Testing regex feature only..."
            cargo test -p coldvox-text-injection --no-default-features --features regex --locked
          '

      # Build main app to ensure integration compiles
      - name: Build main application
        run: cargo build --locked -p coldvox-app

      - name: Run E2E pipeline test
        if: needs.download-vosk-model.outputs.download-outcome == 'success'
        env:
          VOSK_MODEL_PATH: ${{ needs.download-vosk-model.outputs.model-path }}
        run: |
          cargo test -p coldvox-app --locked test_end_to_end_wav_pipeline -- --nocapture

  # Security audit
  security:
    name: Security Audit
    if: false # temporarily disabled per request
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.t7

      - uses: rustsec/audit-check@v2.0.0 # pin to release tag
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Run security audit
        run: cargo audit

  # Success marker job
  ci-success:
    name: CI Success
    if: always()
    needs: [validate-workflows, download-vosk-model, build_and_check, gui-groundwork, text_injection_tests, security]
    runs-on: ubuntu-latest
    steps:
      - name: Check if all jobs succeeded
        run: |
          set -euo pipefail
          failed=0
          for res in \
            "${{ needs.validate-workflows.result }}" \
            "${{ needs.download-vosk-model.result }}" \
            "${{ needs.build_and_check.result }}" \
            "${{ needs.gui-groundwork.result }}" \
            "${{ needs.text_injection_tests.result }}" \
            "${{ needs.security.result }}"; do
            if [[ "$res" == "failure" ]]; then
              failed=1
            fi
          done
          if [[ $failed -eq 1 ]]; then
            echo "One or more CI jobs failed"
            exit 1
          fi
          echo "All CI jobs succeeded (ignoring skipped)"
