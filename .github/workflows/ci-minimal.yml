name: CI (Minimal)

on:
  push:
    branches: [main, "release/*", "feature/*", "feat/*", "fix/*"]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  RUSTFLAGS: "-D warnings"
  CARGO_TERM_COLOR: always

jobs:
  # Fast compilation check on MSRV and stable
  check:
    name: Check (${{ matrix.rust }})
    runs-on: [self-hosted, Linux, X64, fedora, nobara]
    strategy:
      matrix:
        rust: [stable, "1.90"] # MSRV
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
      
      - name: Get Rust version
        id: rust-version
        run: echo "version=$(rustc --version | cut -d' ' -f2)" >> $GITHUB_OUTPUT
      
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ steps.rust-version.outputs.version }}
      
      - name: Type check
        run: cargo check --workspace --all-targets --locked
      
      - name: Build
        run: cargo build --workspace --locked

  # Linting and formatting (stable only)
  lint:
    name: Lint & Format
    runs-on: [self-hosted, Linux, X64, fedora, nobara]
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Get Rust version
        id: rust-version
        run: echo "version=$(rustc --version | cut -d' ' -f2)" >> $GITHUB_OUTPUT
      
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ steps.rust-version.outputs.version }}
      
      - name: Check formatting
        run: cargo fmt --all -- --check
      
      - name: Clippy
        run: cargo clippy --all-targets --locked -- -D warnings
      
      - name: Build docs
        run: cargo doc --workspace --no-deps --locked

  # Unit and integration tests (not E2E)
  test:
    name: Test
    runs-on: [self-hosted, Linux, X64, fedora, nobara]
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
      
      - name: Get Rust version
        id: rust-version
        run: echo "version=$(rustc --version | cut -d' ' -f2)" >> $GITHUB_OUTPUT
      
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ steps.rust-version.outputs.version }}
      
      # Core build dependencies only (no X11/text injection stuff)
      - name: Verify core deps
        run: |
          set -euo pipefail
          for cmd in gcc g++ make pkg-config; do
            command -v $cmd || { echo "Missing: $cmd"; exit 1; }
          done
          pkg-config --exists alsa || { echo "Missing: libalsa-dev"; exit 1; }
      
      - name: Run tests
        run: |
          # Use nextest if available, otherwise fallback
          if command -v cargo-nextest &>/dev/null; then
            cargo nextest run --workspace --locked
          else
            cargo test --workspace --locked
          fi

  # Optional: Text injection tests (only if tools available)
  text-injection:
    name: Text Injection (Optional)
    runs-on: [self-hosted, Linux, X64, fedora, nobara]
    continue-on-error: true # Don't fail CI if this fails
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
      
      - name: Get Rust version
        id: rust-version
        run: echo "version=$(rustc --version | cut -d' ' -f2)" >> $GITHUB_OUTPUT
      
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ steps.rust-version.outputs.version }}
      
      - name: Check if tools available
        id: check_tools
        run: |
          has_tools=true
          for tool in xdotool Xvfb openbox; do
            if ! command -v $tool &>/dev/null; then
              echo "Missing: $tool"
              has_tools=false
            fi
          done
          echo "available=$has_tools" >> $GITHUB_OUTPUT
      
      - name: Run text injection tests
        if: steps.check_tools.outputs.available == 'true'
        env:
          DISPLAY: :99
        run: |
          # Start headless X server
          Xvfb :99 -screen 0 1024x768x24 &
          sleep 2
          openbox &
          sleep 1
          
          cargo test -p coldvox-text-injection --locked
      
      - name: Skip text injection tests
        if: steps.check_tools.outputs.available != 'true'
        run: echo "⚠️ Skipping - X11 tools not available"

  # Optional: Vosk E2E tests (only if model available)
  vosk-e2e:
    name: Vosk E2E (Optional)
    runs-on: [self-hosted, Linux, X64, fedora, nobara]
    continue-on-error: true # Don't fail CI if this fails
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
      
      - name: Get Rust version
        id: rust-version
        run: echo "version=$(rustc --version | cut -d' ' -f2)" >> $GITHUB_OUTPUT
      
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ steps.rust-version.outputs.version }}
      
      - name: Check if Vosk model available
        id: check_model
        run: |
          MODEL_PATH="${VOSK_MODEL_PATH:-models/vosk-model-small-en-us-0.15}"
          if [[ -d "$MODEL_PATH/graph" ]]; then
            echo "available=true" >> $GITHUB_OUTPUT
            echo "path=$MODEL_PATH" >> $GITHUB_OUTPUT
          else
            echo "available=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Run Vosk E2E test
        if: steps.check_model.outputs.available == 'true'
        env:
          VOSK_MODEL_PATH: ${{ steps.check_model.outputs.path }}
        run: cargo test -p coldvox-app --features vosk test_end_to_end_wav_pipeline -- --nocapture
      
      - name: Skip Vosk E2E
        if: steps.check_model.outputs.available != 'true'
        run: echo "⚠️ Skipping - Vosk model not available"
