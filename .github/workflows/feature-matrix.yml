name: Feature Matrix Testing

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      test_strategy:
        description: 'Testing strategy to use'
        required: false
        default: 'curated'
        type: choice
        options:
          - curated
          - default-only
          - no-default
          - each-feature
          - powerset
      verbose:
        description: 'Enable verbose output'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  pull-requests: read

concurrency:
  group: feature-matrix-${{ github.ref }}
  cancel-in-progress: true

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  feature-matrix:
    name: Test ${{ matrix.package }} - ${{ matrix.features.name }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        package: [coldvox-app, coldvox-vad, coldvox-text-injection]
        features:
          # Default features
          - name: "default"
            flags: ""
            
          # No default features
          - name: "no-default"
            flags: "--no-default-features"
            
          # VAD variants
          - name: "silero"
            flags: "--no-default-features --features silero"
            
          - name: "level3"
            flags: "--no-default-features --features level3"
            
          # STT variants
          - name: "vosk"
            flags: "--no-default-features --features vosk"
            
          # Text injection variants (platform-specific)
          - name: "text-injection"
            flags: "--no-default-features --features text-injection"
            
          # Combined features
          - name: "silero+vosk"
            flags: "--no-default-features --features silero,vosk"
            
          - name: "level3+vosk"
            flags: "--no-default-features --features level3,vosk"
            
          - name: "silero+text-injection"
            flags: "--no-default-features --features silero,text-injection"
            
          - name: "full"
            flags: "--features silero,vosk,text-injection"
        
        exclude:
          # Exclude text-injection specific tests from non-app packages
          - package: coldvox-vad
            features:
              name: "text-injection"
          - package: coldvox-vad
            features:
              name: "silero+text-injection"
          - package: coldvox-vad
            features:
              name: "vosk"
          - package: coldvox-vad
            features:
              name: "silero+vosk"
          - package: coldvox-vad
            features:
              name: "level3+vosk"
          - package: coldvox-vad
            features:
              name: "full"
              
          # Exclude VAD-specific tests from text-injection package
          - package: coldvox-text-injection
            features:
              name: "silero"
          - package: coldvox-text-injection
            features:
              name: "level3"
          - package: coldvox-text-injection
            features:
              name: "vosk"
          - package: coldvox-text-injection
            features:
              name: "silero+vosk"
          - package: coldvox-text-injection
            features:
              name: "level3+vosk"
          - package: coldvox-text-injection
            features:
              name: "silero+text-injection"
          - package: coldvox-text-injection
            features:
              name: "full"
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.1.7
        
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@e97e2d8cc328f1b50210efc529dca0028893a2d9 # v1
        with:
          toolchain: stable
          components: rustfmt, clippy
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.package }}-${{ matrix.features.name }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.package }}-${{ matrix.features.name }}-
            ${{ runner.os }}-cargo-${{ matrix.package }}-
            ${{ runner.os }}-cargo-
      
      # Platform-specific setup
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libasound2-dev \
            libdbus-1-dev \
            pkg-config \
            libssl-dev \
            libxcb1-dev \
            libxcb-render0-dev \
            libxcb-shape0-dev \
            libxcb-xfixes0-dev
      
      - name: Install Windows dependencies
        if: runner.os == 'Windows'
        run: |
          # Windows-specific setup if needed
          echo "Windows environment ready"
      
      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: |
          # macOS-specific setup if needed
          echo "macOS environment ready"
      
      # Download Vosk model if testing with Vosk feature
      - name: Download Vosk model
        if: contains(matrix.features.name, 'vosk')
        run: |
          mkdir -p models
          cd models
          if [ ! -d "vosk-model-small-en-us-0.15" ]; then
            curl -L https://alphacephei.com/vosk/models/vosk-model-small-en-us-0.15.zip -o model.zip
            unzip model.zip
            rm model.zip
          fi
        shell: bash
      
      # Build the package with specified features
      - name: Build package
        run: cargo build -p ${{ matrix.package }} ${{ matrix.features.flags }}
      
      # Run tests
      - name: Run tests
        run: cargo test -p ${{ matrix.package }} ${{ matrix.features.flags }}
        env:
          VOSK_MODEL_PATH: ${{ github.workspace }}/models/vosk-model-small-en-us-0.15
      
      # Run clippy for additional checks
      - name: Run clippy
        run: cargo clippy -p ${{ matrix.package }} ${{ matrix.features.flags }} -- -D warnings
        continue-on-error: true

  # Comprehensive test job using the Python script
  comprehensive-test:
    name: Comprehensive Feature Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.1.7
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@e97e2d8cc328f1b50210efc529dca0028893a2d9 # v1
      
      - name: Set up Python
        uses: actions/setup-python@5b6d9a61e9a7a7b13e4e951fea5d0cbfef4e22b8 # v5.3.0
        with:
          python-version: '3.11'
      
      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libasound2-dev \
            libdbus-1-dev \
            pkg-config \
            libssl-dev
      
      - name: Make test script executable
        run: chmod +x test-features.py
      
      - name: Run comprehensive feature tests
        run: |
          strategy="${{ github.event.inputs.test_strategy || 'curated' }}"
          verbose_flag=""
          if [ "${{ github.event.inputs.verbose }}" = "true" ]; then
            verbose_flag="--verbose"
          fi
          
          # Test main app package
          python3 test-features.py \
            -p coldvox-app \
            --strategy "$strategy" \
            $verbose_flag \
            --json-output test-results-app.json
          
          # Test VAD package
          python3 test-features.py \
            -p coldvox-vad \
            --strategy "$strategy" \
            $verbose_flag \
            --json-output test-results-vad.json
          
          # Test text injection package
          python3 test-features.py \
            -p coldvox-text-injection \
            --strategy "$strategy" \
            $verbose_flag \
            --json-output test-results-injection.json
      
      - name: Upload test results
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: always()
        with:
          name: feature-test-results
          path: test-results-*.json
      
      - name: Generate test report
        if: always()
        run: |
          python3 -c "
          import json
          import glob
          
          all_results = []
          for file in glob.glob('test-results-*.json'):
              with open(file) as f:
                  results = json.load(f)
                  all_results.extend(results)
          
          total = len(all_results)
          passed = sum(1 for r in all_results if r['success'])
          failed = total - passed
          
          print('## Feature Testing Summary')
          print(f'- Total tests: {total}')
          print(f'- Passed: {passed}')
          print(f'- Failed: {failed}')
          print(f'- Success rate: {(passed/total*100):.1f}%')
          
          if failed > 0:
              print('\n### Failed Combinations:')
              for r in all_results:
                  if not r['success']:
                      print(f\"- Features: {r['features']} - Command: {r['command']}\")
          " > test-summary.md
          
          cat test-summary.md >> $GITHUB_STEP_SUMMARY

  # Quick smoke test for PRs
  smoke-test:
    name: Quick Smoke Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.1.7
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@e97e2d8cc328f1b50210efc529dca0028893a2d9 # v1
        with:
          toolchain: stable
          components: rustfmt, clippy
      
      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev libdbus-1-dev pkg-config
      
      - name: Check formatting
        run: cargo fmt --all -- --check
      
      - name: Build with default features
        run: cargo build --workspace
      
      - name: Test with default features
        run: cargo test --workspace
      
      - name: Build with no default features
        run: cargo build --workspace --no-default-features
      
      - name: Test with no default features
        run: cargo test --workspace --no-default-features
      
      - name: Run clippy
        run: cargo clippy --workspace --all-targets -- -D warnings