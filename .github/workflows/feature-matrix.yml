name: Feature Matrix Testing

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read

concurrency:
  group: feature-matrix-${{ github.ref }}
  cancel-in-progress: true

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  # Simple test for app crate only - it has the complex features
  app-features:
    name: Test coldvox-app - ${{ matrix.features.name }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        features:
          - name: "default"
            flags: ""
          - name: "no-default"
            flags: "--no-default-features"
          - name: "silero-only"
            flags: "--no-default-features --features silero"
          - name: "text-injection-only"
            flags: "--no-default-features --features text-injection"
          - name: "level3-only"
            flags: "--no-default-features --features level3"

    steps:
      - name: Checkout repository
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.1.7

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@e97e2d8cc328f1b50210efc529dca0028893a2d9 # v1
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0
        with:
          key: ${{ runner.os }}-cargo-coldvox-app-${{ matrix.features.name }}
          cache-on-failure: true

      # Platform-specific setup (Linux only)
      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libasound2-dev \
            libdbus-1-dev \
            pkg-config \
            libssl-dev \
            libxcb1-dev \
            libxcb-render0-dev \
            libxcb-shape0-dev \
            libxcb-xfixes0-dev

      # Build the package with specified features
      - name: Build package
        run: cargo build -p coldvox-app ${{ matrix.features.flags }}

      # Run tests
      - name: Run tests
        run: cargo test -p coldvox-app ${{ matrix.features.flags }}

      # Run clippy for additional checks
      - name: Run clippy
        run: cargo clippy -p coldvox-app ${{ matrix.features.flags }} -- -D warnings

  # Comprehensive test job using the Python script
  comprehensive-test:
    name: Comprehensive Feature Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout repository
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.1.7

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@e97e2d8cc328f1b50210efc529dca0028893a2d9 # v1

      - name: Set up Python
        uses: actions/setup-python@5b6d9a61e9a7a7b13e4e951fea5d0cbfef4e22b8 # v5.3.0
        with:
          python-version: "3.11"

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libasound2-dev \
            libdbus-1-dev \
            pkg-config \
            libssl-dev

      - name: Make test script executable
        run: chmod +x test-features.py

      - name: Run comprehensive feature tests
        run: |
          strategy="curated"
          verbose_flag=""

          # Test main app package
          python3 test-features.py \
            -p coldvox-app \
            --strategy "$strategy" \
            $verbose_flag \
            --json-output test-results-app.json

          # Test VAD package
          python3 test-features.py \
            -p coldvox-vad \
            --strategy "$strategy" \
            $verbose_flag \
            --json-output test-results-vad.json

          # Test text injection package
          python3 test-features.py \
            -p coldvox-text-injection \
            --strategy "$strategy" \
            $verbose_flag \
            --json-output test-results-injection.json

      - name: Upload test results
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: always()
        with:
          name: feature-test-results
          path: test-results-*.json

      - name: Generate test report
        if: always()
        run: |
          python3 -c "
          import json
          import glob

          all_results = []
          for file in glob.glob('test-results-*.json'):
              with open(file) as f:
                  results = json.load(f)
                  all_results.extend(results)

          total = len(all_results)
          passed = sum(1 for r in all_results if r['success'])
          failed = total - passed

          print('## Feature Testing Summary')
          print(f'- Total tests: {total}')
          print(f'- Passed: {passed}')
          print(f'- Failed: {failed}')
          print(f'- Success rate: {(passed/total*100):.1f}%')

          if failed > 0:
              print('\n### Failed Combinations:')
              for r in all_results:
                  if not r['success']:
                      print(f\"- Features: {r['features']} - Command: {r['command']}\")
          " > test-summary.md

          cat test-summary.md >> $GITHUB_STEP_SUMMARY

  # Test coldvox-vad crate features
  vad-features:
    name: Test coldvox-vad - ${{ matrix.features.name }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        features:
          - name: "no-default"
            flags: "--no-default-features"
          - name: "level3-only"
            flags: "--no-default-features --features level3"

    steps:
      - name: Checkout repository
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.1.7

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@1482605bfc5719782e1267fd0c0cc350fe7646b8 # v1
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2.7.3

      # Build the package with specified features
      - name: Build package
        run: cargo build -p coldvox-vad ${{ matrix.features.flags }}

      # Run tests
      - name: Run tests
        run: cargo test -p coldvox-vad ${{ matrix.features.flags }}

      # Run clippy for additional checks
      - name: Run clippy
        run: cargo clippy -p coldvox-vad ${{ matrix.features.flags }} -- -D warnings
        continue-on-error: true

  # Test coldvox-text-injection crate features
  text-injection-features:
    name: Test coldvox-text-injection - ${{ matrix.features.name }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        features:
          - name: "default"
            flags: ""
          - name: "no-default"
            flags: "--no-default-features"

    steps:
      - name: Checkout repository
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.1.7

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@1482605bfc5719782e1267fd0c0cc350fe7646b8 # v1
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2.7.3

      # Platform-specific setup (Linux only)
      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libdbus-1-dev \
            pkg-config \
            libxcb1-dev \
            libxcb-render0-dev \
            libxcb-shape0-dev \
            libxcb-xfixes0-dev

      # Build the package with specified features
      - name: Build package
        run: cargo build -p coldvox-text-injection ${{ matrix.features.flags }}

      # Run tests
      - name: Run tests
        run: cargo test -p coldvox-text-injection ${{ matrix.features.flags }}

      # Run clippy for additional checks
      - name: Run clippy
        run: cargo clippy -p coldvox-text-injection ${{ matrix.features.flags }} -- -D warnings
        continue-on-error: true

  # Quick smoke test for PRs
  smoke-test:
    name: Quick Smoke Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.1.7

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@e97e2d8cc328f1b50210efc529dca0028893a2d9 # v1
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev libdbus-1-dev pkg-config

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Build with default features
        run: cargo build --workspace

      - name: Test with default features
        run: cargo test --workspace

      - name: Build with no default features
        run: cargo build --workspace --no-default-features

      - name: Test with no default features
        run: cargo test --workspace --no-default-features

      - name: Run clippy
        run: cargo clippy --workspace --all-targets -- -D warnings
