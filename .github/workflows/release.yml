name: Release Automation

on:
  pull_request:
    types: [closed]
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: write
  pull-requests: write
  issues: write # allow labeling the release PR

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  release-plz:
    name: Release Please
    if: github.event_name == 'workflow_dispatch'
    runs-on: [self-hosted, Linux, X64, fedora, nobara]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ github.token }}
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      
      - name: Get Rust version
        id: rust-version
        run: echo "version=$(rustc --version | cut -d' ' -f2)" >> $GITHUB_OUTPUT
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ steps.rust-version.outputs.version }}
      - name: Install release-plz
        run: cargo install release-plz --locked
      - name: Run release-plz
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          release-plz release-pr --git-token "$GITHUB_TOKEN"

  # Auto-release when the Release PR is merged into main
  release:
    name: Create Release
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    runs-on: [self-hosted, Linux, X64, fedora, nobara]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: main
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - name: Install release-plz
        run: cargo install release-plz --locked
      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          release-plz release --git-token "$GITHUB_TOKEN"
