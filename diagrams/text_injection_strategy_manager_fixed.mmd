classDiagram
    class StrategyManager {
        <<component>>
        +AsyncInjectionProcessor
        +InjectionConfig
        +InjectionMetrics
        +StrategyManager
        +InjectionContext
        +InjectionError
        +SessionConfig
        +SessionState
    }

    class AsyncInjectionProcessor {
        <<component>>
        +new(config, transcription_rx, shutdown_rx, pipeline_metrics) Self
        +run() async -> Result<(), AnyhowError>
        +handle_transcription(event) async -> Result<(), String>
        +finalize() async -> Result<(), String>
        +cleanup_old_files() async -> Result<(), String>
        -session: Arc<Mutex<TranscriptionSession>>
        -current_utterance_audio: Arc<Mutex<Vec<i16>>>
        -utterance_active: Arc<Mutex<bool>>
        -last_speech_start_ms: Arc<Mutex<Option<u64>>>
        -last_speech_duration_ms: Arc<Mutex<Option<u64>>>
    }

    class StrategyManager {
        <<component>>
        +new(config: InjectionConfig, metrics: Arc<Mutex<InjectionMetrics>>) async Self
        +inject(text: &str) async -> Result<(), InjectionError>
        +get_method_order_uncached() -> Vec<InjectionMethod>
        +is_in_cooldown(method: InjectionMethod) -> bool
        +record_injection_result(method, success, latency_ms)
        -config: InjectionConfig
        -metrics: Arc<Mutex<InjectionMetrics>>
        -strategies: Vec<Box<dyn Strategy>>
        -cooldowns: HashMap<InjectionMethod, Instant>
    }

    class InjectionConfig {
        <<interface>>
        +allow_ydotool: bool
        +allow_kdotool: bool
        +allow_enigo: bool
        +restore_clipboard: bool
        +inject_on_unknown_focus: bool
        +max_total_latency_ms: Option<u64>
        +per_method_timeout_ms: Option<u64>
        +cooldown_initial_ms: Option<u64>
        +injection_mode: String
        +require_focus: bool
    }

    class InjectionMetrics {
        <<component>>
        +attempts: u64
        +successes: u64
        +failures: u64
        +latency_histogram: Vec<u64>
        +method_attempts: HashMap<InjectionMethod, u64>
        +method_successes: HashMap<InjectionMethod, u64>
        +total_latency_ms: u64
    }

    class Strategy {
        <<interface>>
        +inject(context: InjectionContext) async -> Result<(), InjectionError>
        +is_available() async -> bool
        +name() -> &str
        +backend_name() -> &str
    }

    class AtspiStrategy {
        <<component>>
        +inject(context: InjectionContext) async -> Result<(), InjectionError>
        +is_available() async -> bool
        +name() &str
        -atspi: AtspiInjector
    }

    class ClipboardStrategy {
        <<component>>
        +inject(context: InjectionContext) async -> Result<(), InjectionError>
        +is_available() async -> bool
        +name() &str
        +save_clipboard() async -> Result<(), ClipboardError>
        +restore_clipboard() async -> Result<(), ClipboardError>
        -clipboard: ClipboardInjector
    }

    class YdotoolStrategy {
        <<component>>
        +inject(context: InjectionContext) async -> Result<(), InjectionError>
        +is_available() async -> bool
        +name() &str
        -ydotool: YdotoolInjector
    }

    class EnigoStrategy {
        <<component>>
        +inject(context: InjectionContext) async -> Result<(), InjectionError>
        +is_available() async -> bool
        +name() &str
        -enigo: EnigoInjector
    }

    class NoOpStrategy {
        <<component>>
        +inject(context: InjectionContext) async -> Result<(), InjectionError>
        +is_available() async -> bool
        +name() &str
    }

    class InjectionContext {
        <<data>>
        +text: String
        +session_id: String
        +attempt_id: u64
        +focus_status: Option<String>
    }

    class InjectionError {
        <<enumeration>>
        +Timeout
        +Unavailable
        +PermissionDenied
        +Unknown
    }

    class TranscriptionSession {
        <<data>>
        +session_id: String
        +started_at: String
        +ended_at: Option<String>
        +utterances: Vec<UtteranceRecord>
        +metadata: SessionMetadata
    }

    class UtteranceRecord {
        <<data>>
        +utterance_id: u64
        +started_at: String
        +ended_at: String
        +duration_ms: u64
        +text: String
        +confidence: Option<f32>
        +audio_path: Option<PathBuf>
        +words: Option<Vec<WordTiming>>
    }

    class SessionMetadata {
        <<data>>
        +device_name: String
        +sample_rate: u32
        +vad_mode: String
        +stt_model: String
        +app_version: String
    }

    class WordTiming {
        <<data>>
        +word: String
        +start_ms: u32
        +end_ms: u32
        +confidence: f32
    }

    %% Relationships and Flows
    StrategyManager *-- "uses" Strategy
    StrategyManager ..> "configures" InjectionConfig
    StrategyManager ..> "updates" InjectionMetrics
    AsyncInjectionProcessor ..> StrategyManager : "uses for injection"
    AsyncInjectionProcessor ..> TranscriptionSession : "manages"
    Strategy <|.. AtspiStrategy
    Strategy <|.. ClipboardStrategy
    Strategy <|.. YdotoolStrategy
    Strategy <|.. EnigoStrategy
    Strategy <|.. NoOpStrategy
    AtspiStrategy ..> "processes" InjectionContext
    ClipboardStrategy ..> "processes" InjectionContext
    YdotoolStrategy ..> "processes" InjectionContext
    EnigoStrategy ..> "processes" InjectionContext
    NoOpStrategy ..> "processes" InjectionContext
    InjectionContext ..> "contains" InjectionError

    %% App and Foundation Interactions
    AppRuntime["App Runtime from coldvox-app"] ..> AsyncInjectionProcessor : "spawns and configures"
    Foundation["Foundation from coldvox-foundation"] ..> InjectionMetrics : "provides metrics/logging"
    Foundation ..> StrategyManager : "provides config/state"

    %% Message Flows
    note for StrategyManager "Core orchestration with fallback and cooldown logic"
    note for AsyncInjectionProcessor "Handles transcription events and session management"
    note for Strategy "Interface for pluggable injection methods"
    note for InjectionContext "Data passed between components for injection context"
