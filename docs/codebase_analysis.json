{
  "repository": {
    "name": "ColdVox",
    "primary_language": "Rust",
    "secondary_languages": ["Markdown", "Shell", "QML"],
    "frameworks": ["Tokio", "CPAL", "Vosk", "CXX-Qt"],
    "build_system": "Cargo",
    "package_manager": "cargo",
    "workspace_structure": "workspace",
    "estimated_complexity": "complex",
    "file_stats": {
      "total_files": 415,
      "source_files": 147,
      "test_files": 90,
      "config_files": 35,
      "by_extension": {
        ".rs": 147,
        ".toml": 16,
        ".md": 84,
        ".sh": 13,
        ".wav": 16,
        ".txt": 13,
        ".yml": 8,
        ".qml": 7,
        ".svg": 6,
        ".mmd": 6,
        ".dot": 4,
        ".png": 3,
        ".json": 3
      }
    }
  },
  "architecture": {
    "pattern": "Modular, event-driven, multi-stage pipeline. The system is built as a Rust workspace with clearly separated crates for different concerns (audio, VAD, STT, etc.). It uses an asynchronous, actor-like model where components run in their own tasks (or dedicated threads for real-time audio) and communicate via channels.",
    "package_structure": "A Cargo workspace in the root contains a `crates/` directory. Each subdirectory of `crates/` is a separate Rust crate with its own Cargo.toml. The `app` crate is the main application that integrates the other library crates.",
    "layers": [
      {
        "name": "Input/Acquisition",
        "purpose": "Capture audio from microphone devices, manage devices, and listen for system-wide hotkeys.",
        "main_directories": ["crates/coldvox-audio/src", "crates/app/src/audio", "crates/app/src/hotkey/"],
        "key_files": ["crates/coldvox-audio/src/capture.rs", "crates/coldvox-audio/src/device.rs", "crates/app/src/hotkey/listener.rs"],
        "characteristics": ["threads", "real-time", "ffi", "platform-specific"]
      },
      {
        "name": "Processing/Transformation",
        "purpose": "Perform voice activity detection (VAD), normalize audio, and transcribe speech to text.",
        "main_directories": ["crates/coldvox-vad/src", "crates/coldvox-vad-silero/src", "crates/coldvox-stt/src", "crates/coldvox-stt-vosk/src"],
        "key_files": ["crates/coldvox-vad/src/engine.rs", "crates/coldvox-stt-vosk/src/vosk_transcriber.rs", "chunker.rs", "resampler.rs"],
        "characteristics": ["async", "feature-gated", "ffi", "cpu-intensive"]
      },
      {
        "name": "Output/Delivery",
        "purpose": "Inject transcribed text into other applications using an adaptive strategy or display it on a GUI.",
        "main_directories": ["crates/coldvox-text-injection/src", "crates/coldvox-gui/"],
        "key_files": ["crates/coldvox-text-injection/src/manager.rs", "crates/coldvox-text-injection/src/backend.rs", "crates/coldvox-gui/src/main.rs"],
        "characteristics": ["async", "platform-specific", "ffi", "unsafe"]
      },
      {
        "name": "Infrastructure/Utilities",
        "purpose": "Provide core, cross-cutting services like state management, error handling, graceful shutdown, health monitoring, and metrics.",
        "main_directories": ["crates/coldvox-foundation/src", "crates/coldvox-telemetry/src"],
        "key_files": ["crates/coldvox-foundation/src/state.rs", "crates/coldvox-telemetry/src/pipeline_metrics.rs", "shutdown.rs", "error.rs"],
        "characteristics": ["channels", "metrics", "thread-safe"]
      }
    ],
    "entry_points": [
      {"type": "binary", "path": "crates/app/src/main.rs", "purpose": "Main ColdVox CLI application. Parses args, sets up logging, and starts the runtime.", "platform_restrictions": []},
      {"type": "binary", "path": "crates/app/src/bin/tui_dashboard.rs", "purpose": "Terminal UI for monitoring the audio pipeline.", "platform_restrictions": ["unix"]},
      {"type": "binary", "path": "crates/app/src/bin/mic_probe.rs", "purpose": "A utility to test microphone input and list devices.", "platform_restrictions": []},
      {"type": "binary", "path": "crates/coldvox-gui/src/main.rs", "purpose": "Qt-based graphical user interface for the application.", "platform_restrictions": []},
      {"type": "library", "path": "crates/coldvox-foundation/src/lib.rs", "purpose": "Foundation utilities (state, error, shutdown).", "platform_restrictions": []},
      {"type": "library", "path": "crates/coldvox-audio/src/lib.rs", "purpose": "Audio processing, capture, and device management.", "platform_restrictions": []},
      {"type": "library", "path": "crates/coldvox-vad/src/lib.rs", "purpose": "VAD engine abstraction.", "platform_restrictions": []},
      {"type": "library", "path": "crates/coldvox-vad-silero/src/lib.rs", "purpose": "Silero VAD model wrapper.", "platform_restrictions": []},
      {"type": "library", "path": "crates/coldvox-stt/src/lib.rs", "purpose": "STT abstraction and traits.", "platform_restrictions": []},
      {"type": "library", "path": "crates/coldvox-stt-vosk/src/lib.rs", "purpose": "Vosk STT engine implementation.", "platform_restrictions": []},
      {"type": "library", "path": "crates/coldvox-text-injection/src/lib.rs", "purpose": "Adaptive text injection backends and strategy.", "platform_restrictions": []},
      {"type": "library", "path": "crates/coldvox-telemetry/src/lib.rs", "purpose": "Telemetry metrics collection.", "platform_restrictions": []}
    ],
    "data_flow": {
      "pipeline_stages": ["Audio Capture", "Resampling & Chunking", "Voice Activity Detection", "Speech-to-Text Transcription", "Text Injection"],
      "concurrency_model": "A hybrid model. A dedicated, real-time OS thread is used for audio capture to avoid preemption. All other processing stages (chunking, VAD, STT, injection) are asynchronous tasks running on a Tokio multi-threaded runtime. Communication between the audio thread and the async tasks is handled by a lock-free SPSC ring buffer. Communication between async tasks is handled by Tokio's MPSC and broadcast channels.",
      "state_management": "A centralized, explicit state machine (`StateManager` in `coldvox-foundation`) manages the application's lifecycle state (Initializing, Running, Stopping, etc.) with validated transitions using crossbeam channels and an atomic state machine."
    }
  },
  "features": [
    {
      "name": "VAD-Gated Speech-to-Text",
      "type": "core",
      "description": "The core feature of the application. It listens to a microphone, uses Voice Activity Detection (VAD) to detect speech segments, transcribes the speech to text using an STT engine, and then makes the text available for injection.",
      "implementation_details": "The `app::runtime` module wires together the `coldvox-audio`, `coldvox-vad-silero`, and `coldvox-stt-vosk` crates. A stream of audio frames is broadcast to both the VAD and STT processors. The VAD processor sends SpeechStart/SpeechEnd events to the STT processor to gate the transcription. Uses CPAL for device I/O, rtrb ring buffers, and Rubato resampler.",
      "main_modules": ["crates/coldvox-audio/src/capture.rs", "crates/coldvox-vad/src/engine.rs", "crates/coldvox-stt-vosk/src/vosk_transcriber.rs"],
      "test_files": ["crates/app/tests/pipeline_integration.rs", "crates/coldvox-audio/tests/device_hotplug_tests.rs"],
      "dependencies": ["cpal", "rtrb", "rubato", "voice_activity_detector", "vosk"],
      "external_resources": ["microphone", "Vosk ML model files", "ONNX VAD models"],
      "configuration_keys": ["COLDVOX_DEVICE", "COLDVOX_RESAMPLER_QUALITY", "FRAME_DURATION_MS", "VOSK_MODEL_PATH", "save_transcriptions"],
      "platform_specific": false,
      "performance_characteristics": ["real-time", "cpu-intensive"]
    },
    {
      "name": "Adaptive Text Injection",
      "type": "core",
      "description": "Injects the transcribed text into the currently focused application. It uses a variety of platform-specific backends and an adaptive strategy to find a method that works.",
      "implementation_details": "The `coldvox-text-injection` crate contains a `StrategyManager` that detects the user's platform (X11, Wayland) and available tools (AT-SPI, ydotool). It maintains a history of successful injection methods for each application and prioritizes methods that have worked in the past. It uses a fallback chain and cooldowns with exponential backoff for failed methods. Backends include AT-SPI, wl-clipboard, enigo, kdotool, and ydotool.",
      "main_modules": ["crates/coldvox-text-injection/src/manager.rs", "crates/coldvox-text-injection/src/backend.rs"],
      "test_files": ["crates/app/tests/integration/mock_injection_tests.rs", "crates/coldvox-text-injection/src/tests"],
      "dependencies": ["atspi", "wl-clipboard-rs", "enigo", "regex"],
      "external_resources": ["other applications via accessibility or input simulation", "clipboard", "window manager"],
      "configuration_keys": ["COLDVOX_ENABLE_TEXT_INJECTION", "COLDVOX_ALLOW_YDOTOOL", "COLDVOX_ALLOW_KDOTOOL", "COLDVOX_ALLOW_ENIGO"],
      "platform_specific": true,
      "performance_characteristics": ["latency-sensitive"]
    },
    {
      "name": "Telemetry & Monitoring",
      "type": "supporting",
      "description": "Collects and exposes pipeline and STT metrics. Includes a terminal-based dashboard for real-time monitoring.",
      "implementation_details": "Lightweight metrics via parking_lot and custom structs. TUI dashboard is built with ratatui/crossterm.",
      "main_modules": ["crates/coldvox-telemetry/src/pipeline_metrics.rs", "crates/app/src/bin/tui_dashboard.rs"],
      "test_files": [],
      "dependencies": ["parking_lot", "ratatui", "crossterm"],
      "external_resources": [],
      "configuration_keys": [],
      "platform_specific": false,
      "performance_characteristics": []
    },
    {
      "name": "User Interface (Experimental)",
      "type": "utility",
      "description": "Provides an experimental Qt-based graphical frontend.",
      "implementation_details": "GUI is built via cxx-qt and QML, enabling safe Rust-C++ interoperability.",
      "main_modules": ["crates/coldvox-gui/src/main.rs"],
      "test_files": [],
      "dependencies": ["cxx-qt"],
      "external_resources": ["QML files"],
      "configuration_keys": [],
      "platform_specific": false,
      "performance_characteristics": []
    }
  ],
  "modules": [
    {
      "path": "crates/app/src/main.rs",
      "name": "coldvox-main",
      "type": "binary",
      "purpose": "CLI entry point that parses arguments, sets up logging, and starts the runtime pipeline.",
      "public_interface": ["main"],
      "dependencies": { "internal": ["coldvox_app::runtime"], "external": ["clap", "tokio", "tracing", "cpal"] },
      "characteristics": { "lines_of_code": 249, "has_tests": false, "has_benchmarks": false, "uses_unsafe": false, "uses_ffi": false, "platform_specific": false }
    },
    {
      "path": "crates/app/src/runtime.rs",
      "name": "runtime",
      "type": "module",
      "purpose": "Orchestrates the main application logic, wiring together audio capture, VAD, STT, and text injection components into a coherent pipeline.",
      "public_interface": ["start", "AppRuntimeOptions", "AppHandle"],
      "dependencies": { "internal": ["coldvox_audio", "coldvox_vad", "coldvox_text_injection", "coldvox_stt"], "external": ["tokio"] },
      "characteristics": { "lines_of_code": 386, "has_tests": false, "has_benchmarks": false, "uses_unsafe": false, "uses_ffi": false, "platform_specific": false }
    },
    {
      "path": "crates/coldvox-foundation/src/lib.rs",
      "name": "coldvox-foundation",
      "type": "library",
      "purpose": "Provides core, cross-cutting application infrastructure, including a state machine, graceful shutdown handler, health monitor, and custom error types.",
      "public_interface": ["clock", "error", "health", "shutdown", "state"],
      "dependencies": { "internal": [], "external": ["thiserror", "tokio", "parking_lot", "crossbeam-channel"] },
      "characteristics": { "lines_of_code": 11, "has_tests": true, "has_benchmarks": false, "uses_unsafe": false, "uses_ffi": false, "platform_specific": false }
    },
    {
      "path": "crates/coldvox-audio/src/lib.rs",
      "name": "coldvox-audio",
      "type": "library",
      "purpose": "Handles all aspects of audio I/O: manages audio devices, captures audio in a dedicated thread, and resamples/chunks the audio for the pipeline.",
      "public_interface": ["AudioCaptureThread", "AudioChunker", "DeviceManager", "FrameReader", "DeviceMonitor", "AudioRingBuffer", "WatchdogTimer"],
      "dependencies": { "internal": ["coldvox-foundation", "coldvox-telemetry"], "external": ["cpal", "rtrb", "dasp", "rubato", "tokio"] },
      "characteristics": { "lines_of_code": 18, "has_tests": true, "has_benchmarks": false, "uses_unsafe": false, "uses_ffi": true, "platform_specific": true }
    },
    {
      "path": "crates/coldvox-vad/src/lib.rs",
      "name": "coldvox-vad",
      "type": "library",
      "purpose": "Defines the voice activity detection engine abstraction, traits, and configuration.",
      "public_interface": ["UnifiedVadConfig", "VadEngine", "VadEvent", "VadState"],
      "dependencies": { "internal": [], "external": ["serde"] },
      "characteristics": { "lines_of_code": 20, "has_tests": false, "has_benchmarks": false, "uses_unsafe": false, "uses_ffi": false, "platform_specific": false }
    },
    {
      "path": "crates/coldvox-vad-silero/src/lib.rs",
      "name": "coldvox-vad-silero",
      "type": "library",
      "purpose": "Implements the `VadEngine` trait using the Silero VAD model via an ONNX wrapper.",
      "public_interface": ["SileroConfig", "SileroEngine"],
      "dependencies": { "internal": ["coldvox-vad"], "external": ["voice_activity_detector"] },
      "characteristics": { "lines_of_code": 8, "has_tests": true, "has_benchmarks": false, "uses_unsafe": false, "uses_ffi": true, "platform_specific": false }
    },
    {
      "path": "crates/coldvox-text-injection/src/lib.rs",
      "name": "coldvox-text-injection",
      "type": "library",
      "purpose": "Provides a resilient, platform-aware system for injecting text into other applications, featuring multiple backends and an adaptive strategy manager.",
      "public_interface": ["Backend", "StrategyManager", "InjectionSession", "AsyncInjectionProcessor"],
      "dependencies": { "internal": ["coldvox-stt"], "external": ["tokio", "anyhow", "thiserror", "atspi", "wl-clipboard-rs", "enigo", "regex"] },
      "characteristics": { "lines_of_code": 123, "has_tests": true, "has_benchmarks": false, "uses_unsafe": false, "uses_ffi": true, "platform_specific": true }
    },
    {
      "path": "crates/coldvox-stt/src/lib.rs",
      "name": "coldvox-stt",
      "type": "library",
      "purpose": "Defines the speech-to-text abstraction layer and shared traits for transcription engines.",
      "public_interface": ["Transcriber", "EventBasedTranscriber", "next_utterance_id", "TranscriptionEvent"],
      "dependencies": { "internal": [], "external": ["tokio", "tracing", "parking_lot", "async-trait", "thiserror"] },
      "characteristics": { "lines_of_code": 52, "has_tests": false, "has_benchmarks": false, "uses_unsafe": false, "uses_ffi": false, "platform_specific": false }
    },
    {
      "path": "crates/coldvox-stt-vosk/src/lib.rs",
      "name": "coldvox-stt-vosk",
      "type": "library",
      "purpose": "Implements the speech-to-text `Transcriber` trait using the Vosk library via FFI.",
      "public_interface": ["VoskTranscriber", "default_model_path"],
      "dependencies": { "internal": ["coldvox-stt"], "external": ["vosk", "tracing"] },
      "characteristics": { "lines_of_code": 38, "has_tests": false, "has_benchmarks": false, "uses_unsafe": false, "uses_ffi": true, "platform_specific": false }
    },
    {
      "path": "crates/coldvox-telemetry/src/lib.rs",
      "name": "coldvox-telemetry",
      "type": "library",
      "purpose": "Handles telemetry integration and the collection of pipeline and STT metrics.",
      "public_interface": ["metrics", "pipeline_metrics", "stt_metrics"],
      "dependencies": { "internal": ["coldvox-text-injection"], "external": ["parking_lot"] },
      "characteristics": { "lines_of_code": 9, "has_tests": false, "has_benchmarks": false, "uses_unsafe": false, "uses_ffi": false, "platform_specific": false }
    },
    {
      "path": "crates/coldvox-gui/src/main.rs",
      "name": "coldvox-gui",
      "type": "binary",
      "purpose": "Experimental Qt-based graphical user interface entry point.",
      "public_interface": ["main"],
      "dependencies": { "internal": [], "external": ["cxx-qt", "cxx-qt-lib"] },
      "characteristics": { "lines_of_code": 54, "has_tests": false, "has_benchmarks": false, "uses_unsafe": true, "uses_ffi": true, "platform_specific": false }
    }
  ],
  "system_integration": {
    "hardware_access": ["microphone devices", "clipboard"],
    "system_apis": ["ALSA/WASAPI/CoreAudio (via CPAL)", "DBus (via atspi/zbus)", "uinput (via ydotool)", "xprop (X11 window info)", "Qt (via CXX-Qt)"],
    "permission_requirements": ["microphone access", "clipboard access", "uinput group membership for ydotool", "accessibility permissions"],
    "platform_implementations": {
      "windows": {"present": true, "modules": ["coldvox-text-injection (enigo_injector)"]},
      "linux": {"present": true, "modules": ["coldvox-text-injection (atspi, clipboard, ydotool, kdotool)", "hotkey"]},
      "macos": {"present": true, "modules": ["coldvox-text-injection (enigo_injector)"]}
    },
    "external_bindings": [
      {"library": "libasound/CoreAudio/WASAPI (via cpal)", "binding_type": "ffi", "purpose": "Cross-platform audio capture."},
      {"library": "libvosk", "binding_type": "ffi", "purpose": "Speech-to-text transcription."},
      {"library": "libdbus (via atspi)", "binding_type": "ffi", "purpose": "Linux accessibility for text injection and focus tracking."},
      {"library": "Qt6", "binding_type": "ffi", "purpose": "Graphical User Interface via cxx-qt."}
    ]
  },
  "operations": {
    "development": {
      "setup_requirements": ["Rust toolchain (1.75+)", "`just` command runner", "pre-commit", "ALSA headers (Linux)", "pkg-config", "Qt6 for GUI development"],
      "build_commands": {"just build": "Builds the entire workspace in debug mode.", "just build-release": "Builds the entire workspace in release mode."},
      "test_commands": {"just test": "Runs all tests.", "just test-full": "Runs all tests, including those requiring a Vosk model."},
      "required_tools": ["cargo", "just", "pre-commit", "git"],
      "environment_variables": ["RUST_LOG", "COLDVOX_DEVICE", "COLDVOX_RESAMPLER_QUALITY", "VOSK_MODEL_PATH", "COLDVOX_ENABLE_TEXT_INJECTION", "COLDVOX_ALLOW_YDOTOOL", "COLDVOX_ALLOW_KDOTOOL", "COLDVOX_ALLOW_ENIGO"]
    },
    "build_configuration": {
      "profiles": ["debug", "release"],
      "optimization_settings": {},
      "feature_flags": ["vosk", "whisper", "silero", "text-injection", "atspi", "wl_clipboard", "enigo", "kdotool", "ydotool", "qt-ui", "sleep-observer"],
      "conditional_compilation": "`#[cfg(feature = \"...\")]` is used extensively to gate optional components and platform-specific code. `#[cfg(target_os = \"...\")]` is used for OS-specific dependencies and code."
    },
    "deployment": {
      "target_platforms": ["linux", "windows", "macos"],
      "build_artifacts": ["coldvox", "tui_dashboard", "mic_probe", "coldvox-gui"],
      "distribution_method": "Source code compilation. No packaging or binary distribution method is defined.",
      "ci_platform": "github-actions",
      "deployment_files": ["runner-diagnostic.yml", "scripts/setup_vosk.rs"]
    },
    "testing": {
      "frameworks": ["Rust built-in test framework", "tokio-test", "mockall", "proptest", "serial_test"],
      "test_organization": "Unit tests are co-located in `#[cfg(test)]` modules; integration tests are in `tests/` directories within crates.",
      "test_types": {
        "unit": {"count": 30, "location": "inline `mod tests`"},
        "integration": {"count": 1, "location": "`tests/` directories"},
        "benchmarks": {"count": 0, "location": "none"}
      },
      "test_data": "Test audio files (.wav) and transcriptions (.txt) are in `crates/app/test_data`.",
      "coverage_tool": "none"
    }
  },
  "code_characteristics": {
    "performance_optimizations": [
      {"type": "dedicated-thread", "location": "crates/coldvox-audio/src/capture.rs", "purpose": "Isolating real-time audio capture from the async runtime to prevent blocking and ensure low latency."},
      {"type": "lock-free-spsc", "location": "crates/coldvox-audio/src/ring_buffer.rs", "purpose": "Using a lock-free ring buffer (`rtrb`) for communication between the real-time audio thread and the processing pipeline to avoid priority inversion and stalls."},
      {"type": "watchdog", "location": "crates/coldvox-audio/src/watchdog.rs", "purpose": "Monitoring the audio thread for hangs or stalls to enable automatic recovery."},
      {"type": "buffer-pooling", "location": "crates/coldvox-audio/src/capture.rs", "purpose": "Using a `thread_local!` buffer to avoid heap allocations in the audio callback when converting sample formats."}
    ],
    "error_handling": {
      "strategy": "A combination of `thiserror` for defining structured error types and a centralized `RecoveryStrategy` to determine how to respond to different classes of errors (e.g., retry, fallback, fatal).",
      "custom_types": ["AppError", "AudioError", "InjectionError"],
      "recovery_mechanisms": ["Automatic restart of the audio stream on device disconnection or data timeout.", "State transitions on error.", "Fallback chain for text injection methods.", "Retry on transient errors."]
    },
    "concurrency": {
      "model": "both",
      "primitives": ["tokio mpsc", "tokio broadcast", "crossbeam-channel", "mutexes", "rwlock", "atomics"],
      "runtime": "tokio"
    }
  },
  "technical_decisions": [
    {"category": "architecture", "decision": "Use of a multi-crate workspace in Rust.", "evidence": "Root `Cargo.toml` with `[workspace]` section and `crates/` directory.", "context": "This enforces a clean separation of concerns, improves compilation times, and makes it easier to manage the complexity of the project."},
    {"category": "architecture", "decision": "Hybrid threading model (dedicated real-time thread + async task pool).", "evidence": "`std::thread::spawn` in `capture.rs` and `tokio::spawn` used elsewhere.", "context": "This is a best-practice pattern for real-time audio applications in Rust. It prevents the non-deterministic scheduling of the async runtime from interfering with the low-latency requirements of audio capture."},
    {"category": "library", "decision": "Use `rtrb` for the audio ring buffer.", "evidence": "`rtrb` dependency in `coldvox-audio/Cargo.toml` and usage in `ring_buffer.rs`.", "context": "This provides a high-performance, lock-free channel suitable for passing data from a real-time thread to a non-real-time thread without risking priority inversion or blocking."},
    {"category": "pattern", "decision": "Adaptive strategy pattern for text injection.", "evidence": "`StrategyManager` in `coldvox-text-injection/src/manager.rs`.", "context": "Text injection is notoriously brittle. Instead of picking one method, the system tries multiple backends and dynamically re-prioritizes them based on their historical success rate for the specific application in focus. This makes the system highly resilient and adaptable to different user environments."},
    {"category": "library", "decision": "Adopt Vosk for speech recognition.", "evidence": "crates/coldvox-stt-vosk/Cargo.toml", "context": "Provides robust, offline STT support, which is a core requirement for the application."}
  ],
  "documentation_needs": {
    "critical_gaps": ["Root README is minimal and lacks user-facing setup, build, and run instructions.", "The `CLAUDE.md` file is outdated and should be replaced with an accurate architectural overview."],
    "complex_areas": [
      {"area": "Text injection", "reason": "Contains highly complex, platform-specific logic with multiple fallbacks and an adaptive strategy.", "indicators": ["many feature flags", "platform-specific code", "complex state in StrategyManager"]},
      {"area": "Audio pipeline & recovery", "reason": "The audio capture logic is non-trivial, dealing with real-time constraints, hardware flakiness, and automatic recovery.", "indicators": ["dedicated thread management", "watchdog timer", "lock-free communication"]}
    ],
    "operational_gaps": ["Missing setup instructions for end-users, especially for complex dependencies like ALSA, Qt, and text injection tools.", "No defined process for creating releases or distributing binaries.", "Unclear feature-specific build process."]
  },
  "metadata": {
    "analysis_timestamp": "2025-09-11T00:00:00+00:00",
    "files_analyzed": 415,
    "directories_analyzed": 118,
    "packages_analyzed": 10,
    "time_taken_seconds": 0,
    "confidence_notes": ["Combined analysis from two separate reports.", "The analysis of the `coldvox-gui` crate is superficial as it appears to be in early development.", "A `cargo test` failure in one analysis run due to a missing ALSA library highlights a common setup issue that needs to be documented."]
  }
}
